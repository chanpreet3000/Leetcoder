{
    "problemName": "coloring-a-border",
    "language": "cpp",
    "code": "class Solution {\npublic:\n\n    void dfs(vector<vector<int>>& grid, int row, int col, int color){\n        if(row < 0 || col < 0 || row >= grid.size() || col >= grid[0].size())\n            return;\n        if(grid[row][col] < 0)\n            return;\n        if(grid[row][col] != color)\n            return;\n        grid[row][col] *= -1;\n        dfs(grid, row+1, col, color);\n        dfs(grid, row-1, col, color);\n        dfs(grid, row, col+1, color);\n        dfs(grid, row, col-1, color);\n    }\n\n    vector<vector<int>> colorBorder(vector<vector<int>>& grid, int row, int col, int color) {\n        int m = grid.size();\n        int n = grid[0].size();\n\n        if(grid[row][col] == color)\n            return grid;\n\n        int oldColor = grid[row][col];\n        dfs(grid, row, col, oldColor);\n        for(int i = 1; i < m-1; i++){\n            for(int j = 1; j < n-1; j++){\n                if(grid[i][j] > 0)\n                    continue;\n                int c = abs(grid[i][j]);\n                if(abs(grid[i-1][j]) == c && abs(grid[i+1][j]) == c &&\n                    abs(grid[i][j-1]) == c && abs(grid[i][j+1]) == c)\n                        grid[i][j] = c;\n            }\n        }\n        for(int i = 0; i < m; i++){\n            for(int j = 0; j < n; j++)\n                if(grid[i][j] < 0)\n                    grid[i][j] = color;\n        }\n        return grid;\n    }\n};"
}