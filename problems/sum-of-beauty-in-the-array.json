{
    "problemName": "sum-of-beauty-in-the-array",
    "language": "rust",
    "code": "use std::collections::*;\n\nimpl Solution {\npub fn sum_of_beauties(nums: Vec<i32>) -> i32 {\n  let n = nums.len();\n  let mut count = 0;\n  let mut btreemap = BTreeMap::new();\n  for i in 1..n {\n    *btreemap.entry(nums[i]).or_insert(0) += 1;\n  }\n\n  let mut max = nums[0];\n  for i in 1..n-1 {\n      let v = nums[i];\n\n      let entry = btreemap.entry(v).or_insert(0);\n      if *entry == 1 {\n        btreemap.remove(&v);\n      } else {\n        *entry -= 1;\n      }\n      let min = btreemap.iter().next().unwrap();\n\n      if max < v && v < *min.0 {\n        count += 2;\n      } else if nums[i-1] < v && v < nums[i+1] {\n        count += 1;\n      }\n      max = max.max(v);\n  }\n  \n  count\n}\n}"
}