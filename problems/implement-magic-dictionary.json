{
    "problemName": "implement-magic-dictionary",
    "language": "python3",
    "code": "class Trie:\n    def __init__(self,char):\n        self.children={}\n        self.char = char\n        # collections.defaultdict(Trie)\n        self.str=False\n    def add(self,w):\n        root=self\n        for ch in w:\n            if ch not in root.children:\n                root.children[ch]=Trie(ch)\n            root=root.children[ch]\n        root.str=True\n        \n        \nclass MagicDictionary:\n    def __init__(self):\n        self.root=Trie(\"#\")\n        \n    def buildDict(self, dictionary: List[str]) -> None:\n        node=self.root\n        for w in dictionary:\n            node.add(w)\n\n    def search(self, searchWord: str) -> bool:\n        def dfs(node, i, word):\n            if i == len(word):\n                return node.str and self.modified\n            if self.modified:\n                if word[i] in node.children:\n                    return dfs(node.children[word[i]], i + 1, word)\n                else:\n                    return False\n            else:\n                for c in node.children:\n                    self.modified = c != word[i]\n                    if dfs(node.children[c], i + 1, word):\n                            return True\n                return False\n        \n        self.modified = False\n        return dfs(self.root, 0, searchWord)"
}