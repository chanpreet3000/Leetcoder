{
    "problemName": "diagonal-traverse-ii",
    "language": "python3",
    "code": "#\"\"\"\nclass Solution:\n    #def findDiagonalOrder(self, nums: List[List[int]]) -> List[int]:\n    def findDiagonalOrder(self, A):\n        res = []\n        for i, r in enumerate(A):\n            for j, a in enumerate(r):\n                if len(res) <= i + j: # have new cell to input the \n                    res.append([])\n                res[i + j].append(a)\n                \n        return [a for r in res for a in reversed(r)]\n#\"\"\" \n\n\"\"\"\n# this is also a good solution\nclass Solution:\n    def findDiagonalOrder(self, nums: List[List[int]]) -> List[int]:\n        ans = []\n        m = len(nums)\n        \n        queue = collections.deque([(0, 0)])\n        \n        while queue:\n            row, col = queue.popleft()\n            ans.append(nums[row][col])\n            # we only add the number at the bottom if we are at column 0\n            if col == 0 and row + 1 < m:  # to make only element reach to one next, except the first cell\n                queue.append((row + 1, col))\n            # add the number on the right\n            if col + 1 < len(nums[row]):\n                queue.append((row, col + 1))\n            \n        return ans\n\"\"\""
}