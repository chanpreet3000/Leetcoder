{
    "problemName": "boundary-of-binary-tree",
    "language": "python3",
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def boundaryOfBinaryTree(self, root: Optional[TreeNode]) -> List[int]:\n        def dfs_leftmost(node):\n            if not node or not node.left and not node.right:\n                return\n            boundary.append(node.val)\n            if node.left:\n                dfs_leftmost(node.left)\n            else:\n                dfs_leftmost(node.right)\n\n        def dfs_leaves(node):\n            if not node:\n                return\n            dfs_leaves(node.left)\n            if node != root and not node.left and not node.right:\n                boundary.append(node.val)\n            dfs_leaves(node.right)\n\n        def dfs_rightmost(node):\n            if not node or not node.left and not node.right:\n                return\n            if node.right:\n                dfs_rightmost(node.right)\n            else:\n                dfs_rightmost(node.left)\n            boundary.append(node.val)\n\n        if not root:\n            return []\n        boundary = [root.val]\n        dfs_leftmost(root.left)\n        dfs_leaves(root)\n        dfs_rightmost(root.right)\n        return boundary\n        "
}