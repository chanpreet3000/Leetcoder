{
    "problemName": "similar-rgb-color",
    "language": "python3",
    "code": "class Solution:\n    \"\"\"\n    for every pair of chars (3 pairs in total),\n    find the most similar repeating pair.\n\n    create a seperate function to find the most \n    similar pairs\n    \n    O(1)/O(1)\n    \"\"\"\n    def similarRGB(self, color: str) -> str:\n        self.candidate = {\n        int('11', 16), int('22', 16), int('33', 16),\n        int('44', 16), int('55', 16), int('66', 16),\n        int('77', 16), int('88', 16), int('99', 16),\n        int('aa', 16), int('bb', 16), int('cc', 16),\n        int('dd', 16), int('ee', 16), int('ff', 16), int('00', 16)\n        }\n\n        return '#' + self.mostSimilar(color[1:3]) + \\\n            self.mostSimilar(color[3:5]) + \\\n            self.mostSimilar(color[5:7])\n\n\n    def mostSimilar(self, two_char):\n        # give a hex number, return the most similar hex number \n        # with repeating chars\n        n = int(two_char, 16)\n        \n        res, distance = None, math.inf\n\n        for c in self.candidate:\n            if (c - n)**2 < distance:\n                res = c\n                distance = (c - n)**2\n        \n        # return hex[2:] since it starts with '0x'\n        # if res is 0, return '00' (hex only has 1 '0')\n        return hex(res)[2:] if res else '00'\n"
}