{
    "problemName": "find-the-k-sum-of-an-array",
    "language": "cpp",
    "code": "class Solution {\npublic:\n  long long kSum(vector<int> &nums, int k) {\n    int sz = nums.size();\n    long long sum = 0;\n    // the element we can substract from sum\n    vector<long long> subs;\n    for (int i = 0; i < sz; ++i) {\n      if (nums[i] >= 0) {\n        sum += nums[i];\n      } else {\n        // why? because add negative is same as\n        // substract postive\n        nums[i] = abs(nums[i]);\n      }\n    }\n    sort(nums.begin(), nums.end());\n    priority_queue<pair<long long, int>, vector<pair<long long, int>>,\n                   greater<pair<long long, int>>>\n        pq;\n    pq.push({nums[0], 0});\n\n    while (!pq.empty() && subs.size() < k - 1) {\n      auto [cursub, idx] = pq.top();\n      pq.pop();\n\n      subs.push_back(cursub);\n      if (idx < sz - 1) {\n        pq.push({cursub + nums[idx + 1], idx + 1});\n        pq.push({nums[idx + 1] + (cursub - nums[idx]), idx + 1});\n      }\n    }\n    vector<long long> ret;\n    ret.push_back(sum);\n    for (auto &cur : subs) {\n      ret.push_back(sum - cur);\n    }\n\n    return ret[k - 1];\n  }\n};\n"
}