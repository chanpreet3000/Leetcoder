{
    "problemName": "fizz-buzz-multithreaded",
    "language": "cpp",
    "code": "class FizzBuzz {\npublic:\n    FizzBuzz(int n) : n(n) {\n        notifiers[isFizz], notifiers[isBuzz], notifiers[isFizzBuzz], notifiers[isNumber];\n    }\n\n    // printFizz() outputs \"fizz\".\n    void fizz(function<void()> printFizz) {\n        handle(isFizz, printFizz);\n    }\n\n    // printBuzz() outputs \"buzz\".\n    void buzz(function<void()> printBuzz) {\n        handle(isBuzz, printBuzz);\n    }\n\n    // printFizzBuzz() outputs \"fizzbuzz\".\n\tvoid fizzbuzz(function<void()> printFizzBuzz) {\n        handle(isFizzBuzz, printFizzBuzz);\n    }\n\n    // printNumber(x) outputs \"x\", where x is an integer.\n    void number(function<void(int)> printNumber) {        \n        handle(isNumber, [this, &printNumber]() { printNumber(current); });\n    }\n    \nprivate:\n    const int n;\n    \n    int current = 1;\n    mutex mx;\n    map<bool (*)(int), condition_variable> notifiers; // stores corresponding notifiers\n    \n    void handle(bool(*func)(int), const function<void()> &printer) {\n        while (current <= n) {\n            unique_lock<mutex> lock(mx);\n            notifiers[func].wait(lock, [this, &func]() { return current > n || func(current); });\n            if (current > n) {\n                return;\n            } \n            printer();\n            current++;\n            if (current > n) {\n                notify_all();\n            } else {\n                getActiveNotifier().notify_one();\n            }\n            lock.unlock();\n        }\n    }\n        \n    condition_variable &getActiveNotifier() {\n        return find_if(notifiers.begin(), notifiers.end(), [this](auto &kv) { return kv.first(current); })->second;\n    }\n    \n    void notify_all() {\n        for (auto &[_, notifier] : notifiers) {\n            notifier.notify_all();\n        }\n    }\n    \n    static bool isFizz(int n) {\n        return n % 3 == 0 && n % 5 != 0;\n    }\n    \n    static bool isBuzz(int n) {\n        return n % 3 != 0 && n % 5 == 0;\n    }\n    \n    static bool isFizzBuzz(int n) {\n        return n % 3 == 0 && n % 5 == 0;\n    }\n    \n    static bool isNumber(int n) {\n        return n % 3 != 0 && n % 5 != 0;\n    }\n};"
}