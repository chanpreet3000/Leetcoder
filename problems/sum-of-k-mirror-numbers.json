{
    "problemName": "sum-of-k-mirror-numbers",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    vector<long long> mirror1{0}, mirror2{0};\nlong long isMirror(long long num, int base) {\n    long long mul = 1;\n    while (mul * base <= num)\n        mul *= base;\n    for (; num; mul /= base * base) {\n        if (num / mul != num % base)\n            return false;\n        num = (num - (num / mul) * mul - num % base) / base;\n    }\n    return true;\n}\nlong long generate(int dig, int n, int k, long long first_mul) {\n    vector<long long> mirror;\n    long long res = 0;\n    for (int i = 0; n > 0 && i < 10; ++i)\n        for (int j = 0; n > 0 && j < mirror1.size(); ++j) {\n            mirror.push_back(first_mul * i + mirror1[j] * 10 + i); \n            if (i != 0 && isMirror(mirror.back(), k)) {\n                res += mirror.back();\n                --n;\n            }\n        }\n    swap(mirror1, mirror2);\n    swap(mirror2, mirror);\n    return res + (n == 0 ? 0 : generate(dig + 1, n, k, first_mul * 10));\n}\nlong long kMirror(int k, int n) {\n    long long res = 0;\n    for (int i = 1; n > 0 && i < 10; ++i) {\n        mirror2.push_back(i);\n        if (isMirror(i, k)) {\n            res += i;\n            --n;\n        }\n    }\n    return res + generate(2, n, k, 10);\n}\n};"
}