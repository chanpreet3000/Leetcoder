{
    "problemName": "minimum-knight-moves",
    "language": "java",
    "code": "class Solution {\n    private final int[][] DIRECTIONS = new int[][] {{2, 1}, {1, 2}, {-1, 2}, {-2, 1}, {-2, -1}, {-1, -2}, {1, -2}, {2, -1}};\n    \n    public int minKnightMoves(int x, int y) {\n        x = Math.abs(x);\n        y = Math.abs(y);\n        \n        Queue<int[]> queue = new LinkedList<>();\n        queue.add(new int[] {0, 0});\n        \n        Set<String> visited = new HashSet<>();\n        visited.add(\"0,0\");\n        \n        int result = 0;\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                int[] cur = queue.remove();\n                int curX = cur[0];\n                int curY = cur[1];\n                if (curX == x && curY == y) {\n                    return result;\n                }\n                \n                for (int[] d : DIRECTIONS) {\n                    int newX = curX + d[0];\n                    int newY = curY + d[1];\n                    if (!visited.contains(newX + \",\" + newY) && newX >= -1 && newY >= -1) {\n                        queue.add(new int[] {newX, newY});\n                        visited.add(newX + \",\" + newY);\n                    }\n                }\n            }\n            result++;\n        }\n        return -1;\n    }\n}"
}