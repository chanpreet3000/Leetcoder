{
    "problemName": "count-the-repetitions",
    "language": "javascript",
    "code": "/*\n * @lc app=leetcode id=466 lang=javascript\n *\n * [466] Count The Repetitions\n */\n\n// @lc code=start\n// /** 这题关键是找到 s1 里和 s2 里相等的对应index\n//  * 1: Top-down O(s1*n1*s2*n2)\n//  * @param {string} s1\n//  * @param {number} n1\n//  * @param {string} s2\n//  * @param {number} n2\n//  * @return {number}\n//  */\n// const getMaxRepetitions = function (s1, n1, s2, n2) {\n//   const length1 = s1.length * n1\n//   const length2 = s2.length * n2\n//   const memo = {}\n//   const aux = (index1, index2) => {\n//     const key = `${index1}-${index2}`\n//     if (memo[key] !== undefined) {\n//       return memo[key]\n//     }\n//     if (length2 - index2 > length1 - index1) {\n//       return 0\n//     }\n//     if (index1 >= length1) {\n//       return 0\n//     }\n//     const i = index1 % length1\n//     const j = index2 % length2\n//     const i1 = i % s1.length\n//     const j1 = j % s2.length\n//     if (s1[i1] === s2[j1]) {\n//       memo[key] = aux(index1 + 1, index2 + 1) + (j === length2 - 1 ? 1 : 0)\n//     } else {\n//       memo[key] = aux(index1 + 1, index2)\n//     }\n//     return memo[key]\n//   }\n//   return aux(0, 0)\n// }\n\n/**\n * 2: Brute Force O(s1 * n1)\n * @param {string} s1\n * @param {number} n1\n * @param {string} s2\n * @param {number} n2\n * @return {number}\n */\nconst getMaxRepetitions = function (s1, n1, s2, n2) {\n  let index = 0\n  let count = 0\n  for (let i = 1; i <= n1; i++) {\n    for (let j = 0; j < s1.length; j++) {\n      if (s1[j] === s2[index]) {\n        index++\n        if (index === s2.length) {\n          count += 1\n          index = 0\n        }\n      }\n    }\n  }\n  return Math.floor((count) / n2)\n}"
}