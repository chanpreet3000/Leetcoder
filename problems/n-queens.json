{
    "problemName": "n-queens",
    "language": "java",
    "code": "class Solution {\n  public static List<List<String>> solveNQueens(int n) {\n    //simply isko solve kr do boss - using 2d as 1d array for sure now\n    List<List<String>> ans = new ArrayList<>();\n    boolean[][] board = new boolean[n][n];\n\n    solver(n, 0, 0, board, ans, new int[n], new int[n], new int[2*n - 1], new int[2*n - 1]);\n    return ans;\n  }\n  //now simply call the function nQueens\n\n    public static void solver(int n, int floor, int queensPlaced, boolean[][] board, List<List<String>> ans, int[] rows, int[] cols, int[] d1, int[] d2){\n        //combinations solved using for loops let's say\n        if(queensPlaced == n){\n            List<String> cans = new ArrayList<>();\n            \n            StringBuilder sb = new StringBuilder();\n            for(int i = 0; i < n; i++){\n                for(int j = 0; j < n; j++){\n                    if(board[i][j]){\n                        // System.out.print('Q');\n                        sb.append('Q');\n                    }else{\n                        // System.out.print('.');\n                        sb.append('.');\n                    }\n                }\n\n                String temp = sb.toString();\n                cans.add(temp);\n                sb = new StringBuilder();\n                \n            }\n            \n            ans.add(cans);\n            return;\n        }\n        \n        //there are some more optimisation baby\n        //if you are done with this floor, then fucking go the next one!\n        for(int room = 0; room < n; room++){  //checking at that given floor if someone exists or not\n            int row = floor;\n            int col = room;\n            if(!(rows[row] == 1 || cols[col] == 1 || d1[row + col] == 1 || d2[row - col + n - 1] == 1)){\n                board[row][col] = true;\n                rows[row] = 1;\n                cols[col] = 1;\n                d1[row + col] = 1;\n                d2[row - col + n - 1] = 1;\n\n                solver(n, floor + 1,  queensPlaced + 1, board, ans, rows, cols, d1, d2);                \n\n                //demark everything in here\n                board[row][col] = false;\n                rows[row] = 0;\n                cols[col] = 0;\n                d1[row + col] = 0;\n                d2[row - col + n - 1] = 0;\n            }\n        }   \n    }\n}"
}