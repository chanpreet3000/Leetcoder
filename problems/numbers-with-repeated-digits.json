{
    "problemName": "numbers-with-repeated-digits",
    "language": "python3",
    "code": "class Solution:\n    def numDupDigitsAtMostN(self, n: int) -> int:\n\n        def count_res(num, ind, cons):\n            if ind >= len(num):\n                return 1\n            d = num[ind]\n            cu = 0\n            d_ = 0\n            d__ = -1\n            while d_ < d:\n                if d_ in cons:\n                    cu += 1\n                else:\n                    d__ = d_\n                d_ += 1\n            \n            ans = 0\n            if d > cu:\n                # print(\"here:\", num, ind, d, cu)\n                cons.add(d__)\n                ans += (d-cu) * count_res([9]*(len(num)-ind-1), 0, cons)\n                cons.remove(d__)\n            if d not in cons:\n                cons.add(d)\n                ans += count_res(num, ind+1, cons)\n                cons.remove(d)\n\n            # print(num, ind, cons, ans)\n            return ans\n\n        def count(num, ind):\n            # print(num, ind)\n            if ind == len(num):\n                return 1\n\n            d = num[ind]\n            ans = 0\n            ans += count([9]*(len(num)-ind-1), 0)\n            if d > 1:\n                ans += (d-1)*count_res([9]*(len(num)-ind-1), 0, set([0]))\n            ans += count_res(num, ind+1, set([d]))\n            \n            # print(num, ind, ans)\n\n            return ans\n\n\n        \n\n\n        return n - count(list(map(int, str(n))), 0) + 1\n\n"
}