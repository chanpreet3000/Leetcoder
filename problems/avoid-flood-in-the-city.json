{
    "problemName": "avoid-flood-in-the-city",
    "language": "java",
    "code": "class Solution {\n    private int empty=0;\n    private int[] ans;\n    private LinkedList<Integer> list = new LinkedList<>();\n    Map<Integer,Integer> map = new HashMap<>();\n    public int[] avoidFlood(int[] rains) {\n        ans=new int[rains.length];\n        for(int i=0;i<rains.length;i++){\n            if(rains[i]>0){\n                ans[i]=-1;\n                if(map.getOrDefault(rains[i],-1) > -1){\n                    //is theer any dry day greater than map.get(rains[i])i\n                    Iterator<Integer> it = list.iterator();\n                    boolean found=false;\n                    while(it.hasNext()){\n                        int ind = it.next();\n                        if(ind > map.get(rains[i])){\n                            ans[ind]=rains[i];\n                            map.put(rains[i],i);\n                            it.remove();\n                            found=true;\n                            break;\n                        }\n                    }\n                    if(!found)\n                        return new int[0];\n                }\n                else {\n                    map.put(rains[i],i);\n                }\n            }\n            //else, add dry day to linkedlist\n            //empty++\n            else if(rains[i]==0){\n                ans[i]=1;\n                list.add(i);\n            }\n        }\n        // Iterator<Integer> it = list.iterator();\n        // while(it.hasNext()){\n        //     ans[list.poll()]=1;\n        // }\n        return ans;\n    }\n}"
}