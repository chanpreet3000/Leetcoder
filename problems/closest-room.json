{
    "problemName": "closest-room",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    vector<int> closestRoom(vector<vector<int>>& rooms, vector<vector<int>>& queries) {\n        int k = queries.size();\n        vector<int> ans(k, 0);\n        for(int i = 0; i < k; i++){\n            queries[i].push_back(i);\n        }\n        sort(rooms.begin(), rooms.end(), [&](vector<int> &a, vector<int> &b){\n           if(a[1] == b[1])return a[0] < b[0];\n            return a[1] > b[1];\n        });\n        sort(queries.begin(), queries.end(), [&](vector<int> &a, vector<int> &b){\n           if(a[1] == b[1])return a[0] < b[0];\n            return a[1] > b[1];\n        });\n        \n        int j = 0;\n        set<int> st;\n        for(int i = 0; i < k; i++){\n            while(j < rooms.size() && rooms[j][1] >= queries[i][1]){\n                st.insert(rooms[j][0]);\n                // cout<<j<<endl;\n                j++;\n            }\n            // cout<<queries[i][0] <<\" \"<<queries[i][1] << \" \"<<queries[i][2]<<endl;\n            // for(auto i : st){\n            //     cout<<i<<\" | \";\n            // }\n            // cout<<endl;\n            if(st.empty()){\n                ans[queries[i][2]] = -1;\n            }else{\n                // cout<<queries[i][0]<<\" finding\\n\";\n                auto it = st.lower_bound(queries[i][0]);\n                auto it2 = it;\n                --it2;\n                int diff1 = 1e9, diff2 = 1e9;\n                if(it != st.end()){\n                    diff2 = *it - queries[i][0];\n                }\n                if(it != st.begin()){\n                    diff1 = queries[i][0] - *it2;\n                }\n                // cout<<diff1<<\" \"<<diff2<<endl;\n                if(diff1 <= diff2){\n                    ans[queries[i][2]] = *it2;\n                }else{\n                    ans[queries[i][2]] = *it;\n                }\n            }\n        }\n        return ans;\n    }\n};"
}