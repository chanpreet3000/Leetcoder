{
    "problemName": "alien-dictionary",
    "language": "cpp",
    "code": "class Solution {\npublic:\n  string alienOrder(vector<string>& words) {\n    unordered_map<char, unordered_set<char>> adjList;\n    for (auto& word : words)\n      for (auto ch : word)\n        adjList[ch];\n    \n    for (int i = 1; i < words.size(); ++i) {\n      string_view l = words[i - 1];\n      string_view r = words[i];\n      \n      const int len = min(l.size(), r.size());\n      \n      int index = 0;\n      while (index < len && l[index] == r[index])\n        ++index;\n      \n      if (index == len && l.size() > r.size()) \n        return \"\";\n      \n      if (index < len)\n        adjList[l[index]].insert(r[index]);\n    }\n    \n    unordered_map<char, int> inOrder;\n    for (auto [ch, adjChs] : adjList) {\n      inOrder[ch];\n      for (auto adjCh : adjChs) {\n        ++inOrder[adjCh ];\n      }\n    }\n    \n    const int n = inOrder.size();\n    \n    queue<char> q;\n    for (auto [ch, order] : inOrder)\n      if (order == 0)\n        q.push(ch);\n    \n    vector<char> sorted;\n    \n    while (!q.empty()) {\n      auto ch = q.front();\n      q.pop();\n      \n      sorted.push_back(ch);\n      \n      for (auto adjCh : adjList[ch])\n        if (--inOrder[adjCh] == 0)\n          q.push(adjCh);\n    }\n    \n    if (sorted.size() != n) \n      sorted.clear();\n    \n    return {begin(sorted), end(sorted)};\n  }\n};"
}