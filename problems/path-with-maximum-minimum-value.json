{
    "problemName": "path-with-maximum-minimum-value",
    "language": "cpp",
    "code": "class Solution {\nprivate:\n    int R, C;\n    bool visited[101][101];\n\n    // 4 directions to a cell's possible neighbors.\n    vector<vector<int>> dirs{{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\n\npublic:\n    int maximumMinimumPath(vector<vector<int>>& grid) {\n        R = grid.size();\n        C = grid[0].size();\n\n        // Initialize the two boundaries of the search space.\n        int left = 0, right = min(grid[0][0], grid[R - 1][C - 1]);\n\n        while (left < right) {\n            // Get the middle value between left and right boundaries.\n            int middle = (left + right + 1) >> 1;\n            memset(visited, false, sizeof(visited));\n\n            // Check if we can find a path having value equals middle, and cut \n            // the search space by half.\n            if (pathExists(grid, middle, 0, 0)) {\n                left = middle;\n            } else {\n                right = middle - 1;\n            }\n        }\n\n        // Once the left and right boundaries coincide, we find the target value,\n        // that is, the maximum value of a path.\n        return left;\n    }\n    \n    // Check if we can find a path of value = val.\n    int pathExists(vector<vector<int>>& grid, int val, int curRow, int curCol) {\n        // If we reach the bottom-right cell, return true.\n        if (curRow == R - 1 && curCol == C - 1) return true;\n\n        // Mark the current cell as visited.\n        visited[curRow][curCol] = true;\n        for (vector<int> dir : dirs) {\n            int newRow = curRow + dir[0];\n            int newCol = curCol + dir[1];\n\n            // Check if the current cell has any unvisited neighbors with value larger\n            // than or equal to val. \n            if (newRow >= 0 && newRow < R && newCol >= 0 && newCol < C \n                && !visited[newRow][newCol] && grid[newRow][newCol] >= val) {\n\n                // If so, we continue search on this neighbor.\n                if (pathExists(grid, val, newRow, newCol))\n                    return true;\n            }           \n        }\n        return false;\n    } \n};\n"
}