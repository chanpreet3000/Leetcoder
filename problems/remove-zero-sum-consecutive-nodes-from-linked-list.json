{
    "problemName": "remove-zero-sum-consecutive-nodes-from-linked-list",
    "language": "cpp",
    "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeZeroSumSublists_sub(ListNode* head) {\n        map<int, ListNode*> seen;\n        map<ListNode*, int> partial_sum;\n        int current_sum = 0;\n        ListNode *node = head;\n        while(node){\n            // cout << node->val << \" \";\n            current_sum += node->val;\n            if(current_sum == 0){\n                head = node->next;\n                seen.clear();\n            }\n            else if(seen.count(current_sum)){\n                ListNode* previous = seen[current_sum];\n                ListNode* second_node = previous->next;\n                while(second_node != node->next){\n                    seen.erase(partial_sum[second_node]);\n                    partial_sum.erase(second_node);\n                    second_node = second_node->next;\n                }\n                previous->next = node->next;\n                // seen.clear(); // this is the line I have doubts about\n            }\n            else{\n                seen[current_sum] = node;\n                partial_sum[node] = current_sum;\n            }\n            node = node->next;\n        }\n        // cout << endl;\n        // for(pair<int,ListNode*> p : seen) cout << p.first << \" \" << p.second->val << endl;\n        // cout << endl;\n        // for(pair<ListNode*, int> p : partial_sum) cout << p.first->val << \" \" << p.second << endl;\n        return head;\n    }\n    \n    ListNode* removeZeroSumSublists(ListNode* head){\n        // for(int _ = 0; _ < 1000 ; _++) head = removeZeroSumSublists_sub(head);\n        // return head;\n        return removeZeroSumSublists_sub(head);\n    }\n    \n    \n};"
}