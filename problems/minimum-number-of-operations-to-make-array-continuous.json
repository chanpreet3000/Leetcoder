{
    "problemName": "minimum-number-of-operations-to-make-array-continuous",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        for(auto i : nums){\n            cout<<i<<\" \";\n        }\n        cout<<endl;\n//         map<int, int> mp, vis;\n//         for(auto i : nums)if(i - nums[0] <= n - 1)vis[i]++;\n//         for(auto i : nums)mp[i]++;\n//         int ans = nums.size();\n//         for(int i = 0; i < n;){\n//             ans = min(ans, (int)(n - vis.size()));\n            \n//             cout<<vis.rbegin()->first - vis.begin()->first<<endl;\n//             cout<<vis.size()<<\" : \";\n//             for(auto i : vis){\n//                 cout<<i.first<<\" \";\n//             }\n//             cout<<endl;\n//             cout<<i<<\" \"<<vis[nums[i]]<<endl;\n            \n//             vis[nums[i]]--;\n//             if(vis[nums[i]] == 0)vis.erase(nums[i]);\n//             i++;\n//             if(i == n)break;\n            \n//             vis[nums[i] + n - 1] += mp[nums[i] + n - 1] ;\n//             if(vis[nums[i] + n - 1] == 0)vis.erase(nums[i] + n - 1);\n//         }\n//         return ans;\n        int ans = n;\n        int j = 0;\n        map<int, int> mp;\n        for(int i = 0; i < n; i ++){\n            while(j < n && nums[j] - nums[i] <= n - 1){\n                mp[nums[j++]]++;\n            }\n            // for(auto i : mp){\n            //     cout<<i.first<<\":\"<<i.second<<\", \";\n            // }\n            // cout<<endl;\n            ans = min(ans, n - (int)mp.size());\n            mp[nums[i]]--;\n            if(mp[nums[i]] == 0)mp.erase(nums[i]);\n        }\n        return ans;\n    }\n};"
}