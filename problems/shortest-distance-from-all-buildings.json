{
    "problemName": "shortest-distance-from-all-buildings",
    "language": "java",
    "code": "class Solution {\n    public int shortestDistance(int[][] grid) {\n        int shortest=Integer.MAX_VALUE;\n        int count=0;\n        for(int i=0; i<grid.length; i++){\n            for(int j=0; j<grid[0].length; j++){\n                if(grid[i][j]==1){\n                    count++;\n                }\n            }\n        }\n        \n        int m=0, n=0;\n        for(int i=0; i<grid.length; i++){\n            for(int j=0; j<grid[0].length; j++){\n                if(grid[i][j]==0){\n                    shortest=Math.min(shortest,distance(grid, new int[]{i, j}, count));\n                }\n            }\n        }\n        \n        return shortest==Integer.MAX_VALUE?-1:shortest;\n    }\n    \n    private int distance(int[][] grid, int[] house, int count){\n        Queue<int[]> queue=new LinkedList<>();\n        boolean[][] visited=new boolean[grid.length][grid[0].length];\n        queue.offer(house);\n        visited[house[0]][house[1]]=true;\n        \n        int total=0, step=0;\n        int[][] dirs=new int[][]{{0,1},{0,-1},{1,0},{-1,0}};\n        while(!queue.isEmpty()){\n            int size=queue.size();\n            while(size-->0){\n                int[] cur=queue.poll();\n                if(grid[cur[0]][cur[1]]==1){\n                    total+=step;\n                    if(--count==0){\n                        return total;\n                    }\n                    continue;\n                }\n                for(int[] dir:dirs){\n                    int i=cur[0]+dir[0], j=cur[1]+dir[1];\n                    if(i<0 || j<0 || i>=grid.length || j>=grid[0].length || grid[i][j]==2 || visited[i][j]){continue;}\n                    visited[i][j]=true;\n                    queue.offer(new int[]{i, j});\n                }\n            }\n            step++;\n        }\n        \n        return Integer.MAX_VALUE;\n    }\n}"
}