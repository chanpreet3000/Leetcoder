{
    "problemName": "get-watched-videos-by-your-friends",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    vector<string> watchedVideosByFriends(vector<vector<string>>& watchedVideos, vector<vector<int>>& friends, int id, int level) {\n        int n = friends.size();\n        vector<vector<int>> adj(n);\n        for(int i = 0; i < friends.size(); i++){\n            for(auto j : friends[i]){\n                adj[i].push_back(j);\n            }\n        }\n        \n        vector<int> vis(n, 0);\n        queue<int> q;\n        \n        vis[id] = 1;\n        q.push(id);\n        \n        while(!q.empty()){\n            map<string, int> mp;\n            int sz = q.size();\n            for(int i = 0; i < sz; i++){\n                auto f = q.front();\n                q.pop();\n                \n                for(auto it : adj[f]){\n                    if(vis[it])continue;\n                    vis[it] = 1;\n                    q.push(it);\n                    for(auto j : watchedVideos[it]){\n                        mp[j]++;\n                    }\n                }\n            }\n            level--;\n            \n            if(level == 0){\n                vector<pair<string, int>> arr(mp.begin(), mp.end());\n                sort(arr.begin(), arr.end(), [&](pair<string, int> &a, pair<string, int> &b){\n                   if(a.second != b.second)return a.second < b.second;\n                    return lexicographical_compare(a.first.begin(), a.first.end(), b.first.begin(), b.first.end());\n                });\n                vector<string> ans;\n                for(auto i : arr)ans.push_back(i.first);\n                return ans;\n            }\n        }\n        return {};\n    }\n};"
}