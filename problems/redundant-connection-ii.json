{
    "problemName": "redundant-connection-ii",
    "language": "javascript",
    "code": "/**\n * @param {number[][]} edges\n * @return {number[]}\n */\n// condition 1: one node 2 parents, we will try to remove one node. If we remove wrong node, a circle will be created\n// condition 2: a perfect circle without any node having 2 parents, in that case we just remove the last edge that creates circle\nvar findParent = function(parent, i) {\n  if (parent[i] !== i) {\n    parent[i] = findParent(parent, parent[i]);\n  }\n  return parent[i];\n};\n\nvar findRedundantDirectedConnection = function(edges) {\n  var parent = [];\n  //detect circle\n  for (let i = 1; i <= edges.length; i++) {\n    parent[i] = i;\n  }\n  let circleEdge, removedEdge, candidateEdge;\n  for (let i = 0; i < edges.length; i++) {\n    let [u, v] = edges[i];\n    let pu = findParent(parent, u);\n    let pv = findParent(parent, v);\n    if (pv !== v) {\n      removedEdge = [u, v]; // node with 2 parents\n    } else {\n      if (pv == pu) {\n        circleEdge = [u, v]; // circle edge\n      }\n      parent[v] = pu;\n    }\n  }\n  if (!removedEdge) {\n    return circleEdge;\n  }\n  if (circleEdge) {\n    return edges.find(d => d[1] == removedEdge[1] && d[0] !== removedEdge[0]);\n  } else {\n    return removedEdge;\n  }\n};"
}