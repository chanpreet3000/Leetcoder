{
    "problemName": "closest-subsequence-sum",
    "language": "python3",
    "code": "from typing import List\nimport sys\nimport heapq\nimport bisect\n\nclass Solution:\n    def minAbsDifference(self, nums: List[int], goal: int) -> int:\n        mid = len( nums ) // 2\n        l_half = nums[:mid]\n        r_half = nums[mid:]\n\n        def enum_subseq_sums( value_list, cur_index, cur_sum, result_list ):\n            result_list[cur_sum] = 1\n\n            if cur_index >= len(value_list):\n                return\n\n            enum_subseq_sums( value_list, cur_index+1, cur_sum + value_list[cur_index], result_list )\n            enum_subseq_sums( value_list, cur_index+1, cur_sum, result_list )\n\n        ls_subseq_sums = {}\n        rs_subseq_sums = {}\n\n        enum_subseq_sums( l_half, 0, 0, ls_subseq_sums )\n        enum_subseq_sums( r_half, 0, 0, rs_subseq_sums )\n\n        result = sys.maxsize\n\n        l_sums = sorted( list( ls_subseq_sums ) )\n        r_sums = sorted( list( rs_subseq_sums ) )\n\n        # print( l_sums )\n        # print( r_sums )\n\n        for l_sum in l_sums:\n            index = bisect.bisect_left( r_sums, goal - l_sum )\n\n            # not too far right\n            if index < len(r_sums):\n                result = min( result, abs( goal - l_sum - r_sums[index] ) )\n                # print( l_sum, r_sums[index], goal )\n\n            # not too far left\n            if index > 0:\n                result = min( result, abs( goal - l_sum - r_sums[index-1] ) )\n                # print( l_sum, r_sums[index-1], goal )\n\n        return result"
}