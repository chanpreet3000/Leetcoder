{
    "problemName": "optimize-water-distribution-in-a-village",
    "language": "cpp",
    "code": "class Solution {\npublic:\n\n    vector<int> root;\n\n    int find(int i)\n    {\n        if (root[i] != i)\n            root[i] = find(root[i]);\n        return root[i];\n    }\n\n    int minCostToSupplyWater(int n, vector<int>& wells, vector<vector<int>>& pipes) {\n        \n        int cost = 0;\n        root.resize(n);\n        for (int i = 0; i < n; i++)\n        {\n            cost += wells[i];\n            root[i] = i;\n        }\n\n        auto comp = [](vector<int>& pipe1, vector<int>& pipe2){ return pipe1[2] < pipe2[2]; };\n        sort(pipes.begin(), pipes.end(), comp);\n\n        for (vector<int>& pipe: pipes)\n        {\n            int root0 = find(pipe[0]-1);\n            int root1 = find(pipe[1]-1);\n            \n            if (root0 != root1 && (pipe[2] < wells[root0] || pipe[2] < wells[root1]))\n            {\n                if (wells[root0] < wells[root1])\n                {\n                    root[root1] = root0;\n                    cost -= wells[root1];\n                    cost += pipe[2];\n                }\n                else\n                {                    \n                    root[root0] = root1;\n                    cost -= wells[root0];\n                    cost += pipe[2];\n                }\n            }\n        }\n\n        return cost;\n    }\n};"
}