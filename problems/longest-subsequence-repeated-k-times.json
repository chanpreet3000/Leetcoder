{
    "problemName": "longest-subsequence-repeated-k-times",
    "language": "java",
    "code": "class Solution {\n    public String longestSubsequenceRepeatedK(String s, int k) {\n        final int N = 26;\n        // q only stores valid subsequences, initialized with a empty string.\n        Queue<String> q = new LinkedList<>();\n        q.offer(\"\");\n        String res = \"\";\n        \n        while(!q.isEmpty()) {\n            int size = q.size();\n            \n            //go through layer by layer\n            for(int i = 0; i < size; i++) {\n                String curr = q.poll();\n                //go through every letter\n                for(int j = 0; j < N; j++) {\n                    String next = curr + (char)(j + 'a');\n                    if(isSub(s, next, k)) {\n                        res = next;\n                        q.offer(next);\n                    }\n                }\n            }\n            \n        }\n        return res;\n        \n    }\n    // check if sub * k is a subsequence of string s. \n    private boolean isSub(String s, String sub, int k ) {\n        int repeat = 0;\n        int j = 0;\n        \n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == sub.charAt(j)) {\n                j++;\n                if(j == sub.length()) {\n                    repeat++;\n                    //check if already met the k time\n                    if(repeat == k) {\n                        return true;\n                    }\n                    j = 0;\n                }\n            }\n        }\n        return false;\n    }\n}"
}