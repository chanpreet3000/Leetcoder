{
    "problemName": "diameter-of-n-ary-tree",
    "language": "java",
    "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    \n    public Node() {\n        children = new ArrayList<Node>();\n    }\n    \n    public Node(int _val) {\n        val = _val;\n        children = new ArrayList<Node>();\n    }\n    \n    public Node(int _val,ArrayList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\n    public int diameter(Node root) {\n        if (root == null || root.children.size() == 0) return 0;\n        int[] maxDiameter = new int[2];\n        diameterHelper(root, maxDiameter);\n        return maxDiameter[0];\n    }\n    \n    private int diameterHelper(Node root, int[] maxDiameter) {\n        if (root.children.size() == 0) {\n            return 0;\n        }\n        int maxHeight1 = -1;\n        int maxHeight2 = -1;\n        for (Node child : root.children) {\n            int childHeight = diameterHelper(child, maxDiameter);\n            if (childHeight > maxHeight1) {\n                maxHeight2 = maxHeight1;\n                maxHeight1 = childHeight;\n            } else if (childHeight > maxHeight2) {\n                maxHeight2 = childHeight;\n            }\n        }\n        maxDiameter[0] = Math.max(maxDiameter[0], maxHeight1 + maxHeight2 + 2);\n        return maxHeight1 + 1;\n    }\n}"
}