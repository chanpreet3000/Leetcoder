{
    "problemName": "maximum-strength-of-k-disjoint-subarrays",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    long long maximumStrength(vector<int>& nums, int K) {\n        long long dp[nums.size() + 2][K + 1][2];\n        for(int ind = 0; ind <= nums.size(); ind++){\n            for(int k = 0; k <= K; k++){\n                for(int prev = 0; prev < 2; prev ++){\n                    if(ind == nums.size() && k == 0)dp[ind][k][prev] = 0;\n                    else dp[ind][k][prev] = -1e18;\n                }\n            }\n        }\n        for(int ind = nums.size() - 1; ind >= 0; ind--){\n            for(int k = 0; k <= K; k++){\n                for(int prev = 0; prev < 2; prev ++){\n                    long long nt = 0;\n                    if(prev){\n                        if(k > 0)\n                            nt = dp[ind + 1][k - 1][false];\n                    }else{\n                        nt = dp[ind + 1][k][false];\n                    }\n                    \n                    long long sign = (k%2 == 1) ? 1 : -1;\n                    long long tk = 1LL * nums[ind] * k * sign + dp[ind + 1][k][true];\n                    long long tk2 = -1e18;\n                    if(k > 0)\n                        tk2 = 1LL * nums[ind] * k * sign + dp[ind + 1][k - 1][false];\n                    dp[ind][k][prev] = max({tk, nt, tk2});\n                }\n            }\n        }\n        return dp[0][K][false];\n    }\n};"
}