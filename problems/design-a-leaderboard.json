{
    "problemName": "design-a-leaderboard",
    "language": "java",
    "code": "class Leaderboard {\n    private final Map<Integer, Integer> scoreByPlayerId = new HashMap<>();\n    \n    private final TreeMap<Integer, Set<Integer>> playerIdsByScore = new TreeMap<>(\n        Comparator.<Integer>reverseOrder()\n    );\n\n    public Leaderboard() {\n        \n    }\n    \n    public void addScore(int playerId, int score) {\n        if (scoreByPlayerId.containsKey(playerId)) {\n            score += resetAndGetOldScore(playerId);\n        }\n        \n        scoreByPlayerId.put(playerId, score);\n        playerIdsByScore\n            .computeIfAbsent(score, (ignored) -> new HashSet<>())\n            .add(playerId);\n    }\n    \n    public int top(int K) {\n        int finalScore = 0;\n        for (int score : playerIdsByScore.keySet()) {\n            int playersCount = playerIdsByScore.get(score).size();\n            while (playersCount-- > 0 && K-- > 0) {\n                finalScore += score;\n            }\n            \n            if (K == 0) {\n                break;\n            }\n        }\n        return finalScore;\n    }\n    \n    private int resetAndGetOldScore(int playerId) {\n        int oldScore = scoreByPlayerId.get(playerId);\n            \n        if (playerIdsByScore.get(oldScore).size() == 1) {\n            playerIdsByScore.remove(oldScore);\n        } else {\n            playerIdsByScore.get(oldScore).remove(playerId);\n        }\n        \n        scoreByPlayerId.remove(playerId);\n        return oldScore;\n    }\n    \n    public void reset(int playerId) {\n        resetAndGetOldScore(playerId);\n    }\n}\n\n/**\n * Your Leaderboard object will be instantiated and called as such:\n * Leaderboard obj = new Leaderboard();\n * obj.addScore(playerId,score);\n * int param_2 = obj.top(K);\n * obj.reset(playerId);\n */"
}