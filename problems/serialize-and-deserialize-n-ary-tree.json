{
    "problemName": "serialize-and-deserialize-n-ary-tree",
    "language": "java",
    "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Codec {\n    // Encodes a tree to a single string.\n    public String serialize(Node root) {\n        if (root == null) {\n            return \"\";\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        sb.append(\"(\");\n        sb.append(root.val);\n        \n        for (Node child : root.children) {\n            sb.append(serialize(child));\n        }\n        \n        sb.append(\")\");\n        return sb.toString();\n    }\n\t\n    // Decodes your encoded data to tree.\n    public Node deserialize(String data) {\n        if (\"\".equals(data)) {\n            return null;    \n        }\n        \n        return deserialize(data, 0).getKey();\n    }\n    \n    public Pair<Node, Integer> deserialize(String data, int i) {\n        int val = 0;\n        ++i;\n        while (Character.isDigit(data.charAt(i))) {\n            val *= 10;\n            val += (data.charAt(i) - '0');\n            ++i;\n        }\n        \n        List<Node> children = new ArrayList<>();\n        while (data.charAt(i) == '(') {\n            Pair<Node, Integer> result = deserialize(data, i);\n            i = result.getValue();\n            children.add(result.getKey());\n        }\n        \n        return new Pair<>(new Node(val, children), i + 1);\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.deserialize(codec.serialize(root));"
}