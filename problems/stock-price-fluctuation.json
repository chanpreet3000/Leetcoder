{
    "problemName": "stock-price-fluctuation",
    "language": "java",
    "code": "class StockPrice {\n    \n    private int latestTimeStamp;\n    private Map<Integer, Integer> priceMap;\n    private TreeMap<Integer, Set<Integer>> valToTime;\n\n    public StockPrice() {\n        priceMap = new HashMap<>();\n        latestTimeStamp = 0;\n        valToTime = new TreeMap<>();\n    }\n    \n    public void update(int timestamp, int price) {\n        if(timestamp > latestTimeStamp) {\n            latestTimeStamp = timestamp;\n        }\n        int val = priceMap.getOrDefault(timestamp, -1);\n        priceMap.put(timestamp, price);\n        \n        Set<Integer> currentTimes = valToTime.getOrDefault(price, new HashSet<>());\n        currentTimes.add(timestamp);\n        valToTime.put(price, currentTimes);\n        \n        if(val != -1 && val != price) {\n            Set<Integer> prevTimes = valToTime.getOrDefault(val, new HashSet<>());\n            if(prevTimes.contains(timestamp)) {\n                prevTimes.remove(timestamp);\n            }\n            if(prevTimes.size() == 0) {\n                valToTime.remove(val);\n            } else {\n                valToTime.put(val, prevTimes);\n            }\n        }\n    }\n    \n    public int current() {\n        return priceMap.get(latestTimeStamp);\n    }\n    \n    public int maximum() {\n        return valToTime.lastKey();  // Last key is the maximum value (We can observe this value at multiple timestamps)\n    }\n    \n    public int minimum() {\n        return valToTime.firstKey(); // First key is the minimum value (We can observe this value at multiple timestamps)\n    }\n}"
}