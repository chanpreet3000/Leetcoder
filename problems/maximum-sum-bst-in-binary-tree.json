{
    "problemName": "maximum-sum-bst-in-binary-tree",
    "language": "java",
    "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    class Node{\n        int sum;\n        int max;\n        int min;\n        Node(int sum, int max, int min){\n            this.sum = sum;\n            this.max = max;\n            this.min = min;\n          \n        }\n    }\n    public int maxSumBST(TreeNode root) {\n        int[] result = new int[1];\n        check(root,result);\n        return result[0];\n    }\n    \n    Node check(TreeNode root, int[] result){\n        if(root == null){\n            return new Node(0,Integer.MIN_VALUE,Integer.MAX_VALUE);\n        }\n        \n        Node left = check(root.left, result);\n        Node right = check(root.right,result);\n        \n        if(left == null || right == null || root.val <= left.max || root.val >= right.min){\n            return null;\n        }\n        \n        int sum = root.val + left.sum + right.sum;\n        result[0] = Math.max(result[0],sum);\n        return new Node(sum,Math.max(root.val,right.max),Math.min(root.val,left.min));\n    }\n    \n}"
}