{
    "problemName": "robot-bounded-in-circle",
    "language": "java",
    "code": "class Solution {\n    public boolean isRobotBounded(String instructions) {\n        int[] place = {0,0,0};\n        Character direct = new Character('n');\n        int[] newPlace = {0,0,0};\n        for (int i = 0; i < 4; i++){\n            newPlace = move(instructions, newPlace);\n            if (place[0] == newPlace[0] && place[1] == newPlace[1])\n                return true;\n        }\n        return false;\n        \n    }\n    \n    public int[] move(String instructions, int[] start){\n        int[] newPlace = {start[0], start[1], start[2]};\n        for (int i = 0; i < instructions.length(); i++){\n            char inst = instructions.charAt(i);\n            if (inst == 'G'){\n                if (newPlace[2] == 0)\n                    newPlace[1]++;\n                else if (newPlace[2] == 2)\n                    newPlace[1]--;\n                else if (newPlace[2] == 1)\n                    newPlace[0]--;\n                else\n                    newPlace[0]++;\n            }\n            else if (inst == 'L'){\n                if (newPlace[2] == 0)\n                    newPlace[2] = 1;\n                else if (newPlace[2] == 1)\n                    newPlace[2] = 2;\n                else if (newPlace[2] == 2)\n                    newPlace[2] = 3;\n                else\n                    newPlace[2] = 0;\n            }\n            else{\n                if (newPlace[2] == 0)\n                    newPlace[2] = 3;\n                else if (newPlace[2] == 3)\n                    newPlace[2] = 2;\n                else if (newPlace[2] == 2)\n                    newPlace[2] = 1;\n                else\n                    newPlace[2] = 0;\n            }\n        }\n        return newPlace;\n    }\n}"
}