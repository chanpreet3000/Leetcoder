{
    "problemName": "number-of-ways-to-build-sturdy-brick-wall",
    "language": "java",
    "code": "class Solution {\n    int width, height;\n    int[] bricks;\n    List<Integer> rows;\n    int MOD = 1_000_000_007;\n    public int buildWall(int height, int width, int[] bricks) {\n        this.height = height;\n        this.width = width;\n        this.bricks = bricks;\n        rows = new ArrayList<>();\n        dfs(0, 0);\n        \n        int[][] dp = new int[height][1024];\n        for(int row : rows) {\n            dp[0][row] = 1;\n        }\n        \n        for(int i = 1; i < height; i++) {\n            for(int cur : rows) {\n                for(int pre : rows) {\n                    // not join bricks at the same location\n                    if((pre & cur) == 0) {\n                        dp[i][cur] = (dp[i][cur] + dp[i - 1][pre]) % MOD;\n                    }\n                }\n            }\n        }\n        \n        int res = 0;\n        for(int num : dp[height - 1]) {\n            res += num;\n            res %= MOD;\n        }\n        return res;\n        \n    }\n    \n    public void dfs(int w, int mask) {\n        if(w == width) {\n            rows.add(mask);\n            return;\n        }\n        //Record the end of brick\n        if(w >= 1) {\n            mask |= (1 << (w - 1));\n        }\n        for(int b : bricks) {\n            if(b + w <= width) {\n                dfs(b + w, mask);\n            }\n        }\n    }\n}"
}