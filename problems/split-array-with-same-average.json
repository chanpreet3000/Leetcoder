{
    "problemName": "split-array-with-same-average",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    \n    int n;\n    \n    void solve(vector<int>& nums,int i,int sum,int count,int sz,unordered_map<int,unordered_set<int>> &m)\n    {  \n        if(i==sz) \n        {\n\t\t\t//storing n*sum from eqn 1.\n            m[count].insert(sum*n);\n            return ;\n        }\n        \n        solve(nums,i+1,sum+nums[i],count+1,sz,m);\n        solve(nums,i+1,sum,count,sz,m);\n    }\n    \n    bool splitArraySameAverage(vector<int>& nums) {\n        \n        n=nums.size();\n        \n        int sum=0;\n        \n        for(auto &x:nums) sum+=x;\n        \n        unordered_map<int,unordered_set<int>> m1,m2;\n      \n        //m1[x] stores all possible sum of length x made up of from left half\n        //m2[x] stores all possible sum of length x made up of from right half\n        solve(nums,0,0,0,n/2,m1);\n        solve(nums,n/2,0,0,n,m2);\n        \n        for(auto &x:m1)\n        {\n            for(auto &y:x.second)\n            { \n                for(auto &z:m2)\n                {\n                    int a=x.first,b=z.first;\n                    \n                    if(a+b==0 || a+b==n) continue;\n                    \n                    if(m2[b].find((a+b)*sum-y)!=m2[b].end()) return true;\n                }\n            }\n        }\n        \n        return false;\n        \n    }\n};"
}