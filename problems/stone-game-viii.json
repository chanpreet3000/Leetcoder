{
    "problemName": "stone-game-viii",
    "language": "python3",
    "code": "class Solution:\n    def stoneGameVIII(self, stones: List[int]) -> int:\n        sums, memory, n = [0], {}, len(stones)\n        for s in stones:\n            sums.append(s + sums[-1])\n        \n        memory, biggest = [sums[-1]] * n, sums[-1] \n        for start in range(n - 2, -1, -1):\n            memory[start] = max(biggest, sums[start + 1] - biggest)\n            biggest = max(biggest, memory[start])\n        return memory[1]\n\n# The concept\n\n#     Collect a prefix sum of the stone values to refer to later at constant time\n#     Generate dp array with the total sum of stone values (aka, score if all the stones are picked)\n#     Iterate backwards on the dp array keeping track of the biggest result seen so far\n#     For current result, pick max of the biggest seen (choosing to go right to it and pick it), or the current prefix sum minus biggest seen (choosing to pick the current and the next opponent picks the biggest when playing optimally)\n#     Return result of the second element as the game cannot start by picking one stone\n\n# Time Complexity - O(N)\n# Space Complexity - O(N)"
}