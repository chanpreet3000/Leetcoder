{
    "problemName": "maximum-total-beauty-of-the-gardens",
    "language": "python3",
    "code": "class Solution:\n    def maximumBeauty(self, f: List[int], newFlowers: int, tar: int, full: int, partial: int) -> int:\n        f = [min(tar, a) for a in f]\n        if not f:\n            return 0\n        if min(f) == tar: return full * len(f)\n        if newFlowers >= tar * len(f) - sum(f):\n            return max(full*len(f), full*(len(f)-1) + partial*(tar-1))\n\n        sortedF = sorted(f)\n        costList = []\n        prev = sortedF[0]\n        cost = 0\n        count = 0\n\n        for i in range(len(f)):\n            if sortedF[i] < tar:\n                cost += (sortedF[i] - prev)*count\n                costList.append(cost) \n                prev = sortedF[i]\n                count += 1\n            else:\n                break\n        \n        remain = newFlowers\n        res = 0\n        gain = 0\n        i = len(f)-1\n        while i >=0 and remain >= 0:\n            if sortedF[i] >= tar:\n                gain += full\n            else:\n                index = min(bisect.bisect_right(costList, remain)-1, i)\n                res = max(res, gain+partial*(sortedF[index]+ (remain-costList[index]) // (index+1)))\n\n                remain -= tar - sortedF[i]\n                if remain < 0:\n                    break\n                gain += full\n            i-=1\n\n        return res\n\n        "
}