{
    "problemName": "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
    "language": "javascript",
    "code": "const MAX_VALUE = 5000;\n/**\n * @param {number[][]} mat\n * @param {number} k\n * @return {number}\n */\nvar kthSmallest = function(mat, k) {\n    const height = mat.length;\n    const width = mat[0].length;\n    \n    const numCombinations = (row, sum, limit) => {\n        if (sum > limit) return 0;\n        if (row === height) return 1;\n        let totalCombinations = 0;\n        for (let value of mat[row]) {\n            let count = numCombinations(row + 1, value + sum, limit);\n            totalCombinations += count;\n            if (count === 0 || totalCombinations > k) break;\n        }\n        return totalCombinations;\n    }\n    \n    let lo = height;\n    let hi = lo * MAX_VALUE;\n    while (lo < hi) {\n        // value (mid) we are checking to see if the number of combinations\n        // is less than or equal to this value (mid)\n        const mid = Math.floor((lo + hi) / 2);\n\n        const count = numCombinations(0, 0, mid);\n        if (count < k) {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    return lo;\n};"
}