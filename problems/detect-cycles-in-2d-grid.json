{
    "problemName": "detect-cycles-in-2d-grid",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    vector<int> d4 = {-1, 0, 1, 0, -1};\n    bool helper(vector<vector<char>> &grid, vector<vector<int>> &vis, int x, int y, int px, int py){\n        if(vis[x][y])return true;\n        vis[x][y] = 1;\n        for(int i = 0; i < 4; i++){\n            int _x = x + d4[i];\n            int _y = y + d4[i + 1];\n            if(_x >=0 && _x < grid.size() && _y >=0 && _y< grid[0].size() && grid[x][y] == grid[_x][_y] && (_x != px || _y != py)){\n                \n                if(helper(grid, vis, _x, _y, x, y))return true;\n            }\n        }\n        return false;\n    }\n    bool containsCycle(vector<vector<char>>& grid) {\n        vector<vector<int>> vis(grid.size(), vector<int>(grid[0].size()));\n        for(int i = 0; i < grid.size(); i++){\n            for(int j = 0; j < grid[0].size(); j++){\n                if(!vis[i][j] && helper(grid, vis, i, j, -1, -1)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n};"
}