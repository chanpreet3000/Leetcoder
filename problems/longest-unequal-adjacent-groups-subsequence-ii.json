{
    "problemName": "longest-unequal-adjacent-groups-subsequence-ii",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    int hamming(string &a, string &b){\n        int c = 0;\n        for(int i = 0; i < a.length(); i++){\n            if(a[i] != b[i])c++;\n        }\n        return c;\n    }\n    \n    vector<string> getWordsInLongestSubsequence(int n, vector<string>& words, vector<int>& groups) {\n        vector<vector<int>> dist(n, vector<int> (n, 0));\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(words[i].size() == words[j].size()){\n                    dist[i][j] = hamming(words[i], words[j]);\n                }\n            }\n        }\n        vector<int> v2(n, 1), v3(n, 1);\n        for(int i = 0; i < n; i++){\n            v3[i] = i;\n            for(int j = 0; j < i; j++){\n                if((groups[j]  != groups[i] && words[i].size() == words[j].size() && dist[i][j] == 1) && (1 + v2[j])> v2[i]){\n                    v2[i] = 1 + v2[j];\n                    v3[i] = j;\n                }\n            }\n        }\n        int ans = -1;\n        int len = -1;\n        for (int i = 0; i < n; i++){\n            if(v2[i] > ans){\n                ans = v2[i];\n                len = i;\n            }\n        }\n        vector<string> temp;\n        temp.push_back(words[len]);\n        while(v3[len] != len){\n            len = v3[len];\n            temp.push_back(words[len]);\n        }\n        reverse(temp.begin(), temp.end());\n        return temp;\n    }\n};"
}