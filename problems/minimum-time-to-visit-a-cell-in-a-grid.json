{
    "problemName": "minimum-time-to-visit-a-cell-in-a-grid",
    "language": "cpp",
    "code": "vector<int> d4 = {-1, 0, 1, 0, -1};\nclass Solution {\npublic:\n    int minimumTime(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        if(grid[0][1] > 1 && grid[1][0] > 1)return -1;\n        map<pair<int, int>, int> vis;\n        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;\n        pq.push({0, {0, 0}});\n        vis[{0, 0}];\n        while(!pq.empty()){\n            auto t = pq.top();\n            pq.pop();\n            int x = t.second.first, y = t.second.second, z = t.first;\n            if(x == n - 1 && y == m - 1)return t.first;\n            \n            for(int i = 0; i < 4; i++){\n                int _x = x + d4[i], _y = y + d4[i + 1];\n                if(_x >=0 && _x < n && _y >=0 && _y < m && !vis[{_x, _y}]){\n                    vis[{_x, _y}] = 1;\n                    if(grid[_x][_y] <= t.first){\n                        pq.push({t.first + 1, {_x, _y}});\n                    }else{\n                        int temp = (grid[_x][_y] - t.first)/2;\n                        pq.push({t.first + 2 * temp + 1, {_x, _y}});\n                    }\n                }\n            }\n        }\n        return -2;\n    }\n};"
}