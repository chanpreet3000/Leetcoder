{
    "problemName": "find-distance-in-a-binary-tree",
    "language": "python3",
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    \n    def __init__(self):\n        self.LCA = None\n    \n    def getLCA(self,node,p,q):\n        \n        if node is None:\n            return False # overflowing past a leaf in search of target implies node was not found on this leg\n        \n        left_search = self.getLCA(node.left,p,q)\n        right_search = self.getLCA(node.right,p,q)\n    \n        current = node.val==p or node.val==q\n        \n        if left_search + right_search + current == 2:\n            self.LCA = node\n            \n        return left_search or right_search or current\n    \n    def getDistance(self,node,val):\n        \n        if node is None:\n            return math.inf # did not find node on this travel path\n        \n        if node.val == val:\n            return 0 # no more distance to travel to find node\n        \n        left_search = 1 + self.getDistance(node.left,val)\n        right_search = 1 + self.getDistance(node.right,val)\n        \n        return min(left_search,right_search)\n    \n    def findDistance(self, root: Optional[TreeNode], p: int, q: int) -> int:\n        \n        if p==q:\n            return 0\n        \n        self.getLCA(root,p,q)\n        \n        p_dist = self.getDistance(self.LCA,p)\n        q_dist = self.getDistance(self.LCA,q)\n        \n        return p_dist + q_dist"
}