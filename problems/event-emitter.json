{
    "problemName": "event-emitter",
    "language": "javascript",
    "code": "class EventEmitter {\n    constructor() {\n        this.events = new Map();\n    }\n\n  subscribe(event, cb) {\n      if (!this.events.has(event)) {\n          this.events.set(event, []);\n      }\n\n      const listeners = this.events.get(event);\n      listeners.push(cb);\n\n    return {\n        unsubscribe: () => {\n            const index = listeners.indexOf(cb);\n            if (index !== -1){\n                listeners.splice(index, 1);\n            }\n        }\n    };\n  }\n\n  emit(event, args = []) {\n      if (!this.events.has(event)){\n          return [];\n      }\n\n      const listeners = this.events.get(event);\n      const results = [];\n\n      for (const listener of listeners){\n          results.push(listener(...args));\n      }\n\n      return results;\n  }\n}\n\n/**\n * const emitter = new EventEmitter();\n *\n * // Subscribe to the onClick event with onClickCallback\n * function onClickCallback() { return 99 }\n * const sub = emitter.subscribe('onClick', onClickCallback);\n *\n * emitter.emit('onClick'); // [99]\n * sub.unsubscribe(); // undefined\n * emitter.emit('onClick'); // []\n */\n\n //https://leetcode.com/problems/event-emitter/solutions/3550743/easy-js-implementation-callback-functions-maps-subscribe-concepts-used-js-40-mb/?envType=study-plan-v2&envId=30-days-of-javascript"
}