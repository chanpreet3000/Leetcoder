{
    "problemName": "synonymous-sentences",
    "language": "golang",
    "code": "import (\n    \"strings\"\n    \"fmt\"\n    \"sort\"\n)\n\nfunc generateSentences(synonyms [][]string, text string) []string {\n    synMap := make(map[string][]string)\n    for _, pair := range synonyms{\n        synMap[pair[0]] = append(synMap[pair[0]], pair[1])\n        synMap[pair[1]] = append(synMap[pair[1]], pair[0])\n    }\n    \n    words := strings.Split(text, \" \")\n    sents := []string{}\n    for _, word := range words{\n        sortedSyns := getAllSynonyms(word, synMap)\n        if len(sents) == 0{\n            sents = sortedSyns[:]\n        }else{\n            tmp := []string{}\n            for _, s := range sents{\n                for _, syn := range sortedSyns{\n                    tmp = append(tmp, fmt.Sprintf(\"%s %s\", s, syn))\n                }\n                sents = tmp[:]\n            }\n        }\n    } \n    \n    return sents\n    \n}\n\n\nfunc getAllSynonyms(word string, synonyms map[string][]string) []string{\n    res := []string{}\n    visited := map[string]int{word:1}\n    q := []string{word}\n    for len(q) > 0{\n        curr := q[0]\n        q = q[1:]\n        for _, syn := range synonyms[curr]{\n            if _, ok := visited[syn]; !ok{\n                visited[syn] = 1\n                q = append(q, syn)\n            }\n        }\n        res = append(res, curr)\n    }\n    sort.Strings(res)\n    return res\n}"
}