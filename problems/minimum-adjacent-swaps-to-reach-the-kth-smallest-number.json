{
    "problemName": "minimum-adjacent-swaps-to-reach-the-kth-smallest-number",
    "language": "python3",
    "code": "class Solution:\n    def getMinSwaps(self, num: str, k: int) -> int:\n        wonderfulNum = [n for n in num]\n        \n        for i in range(k) :\n            wonderfulNum = self.nextWonderfulNumber(wonderfulNum)\n        \n        result = 0\n        original = [n for n in num]\n        \n        for i in range(len(wonderfulNum)):\n            if wonderfulNum[i] != original[i]:\n                result += self.adjust(wonderfulNum, original, i)\n        \n        return result\n    \n    def nextWonderfulNumber(self, num: List[str]) -> List[str]:\n        for i in range(len(num) - 2, -1, -1):\n            if num[i] < num[i + 1]:\n                for j in range(len(num) - 1, i, -1):\n                    if num[i] < num[j]:\n                        temp = num[i]\n                        num[i] = num[j]\n                        num[j] = temp\n                        break\n                suffix = num[i + 1:]\n                suffix.sort()\n                return num[:i + 1] + suffix\n        \n        return num\n    \n    def adjust(self, wonderful: List[str], original: List[str], index: int) -> int:\n        for i in range(index, len(original)):\n            if original[i] == wonderful[index]:\n                for j in range(i, index, -1):\n                    original[j] = original[j - 1]\n                original[index] = wonderful[index]\n                \n                return i - index\n        \n        return 0\n                            "
}