{
    "problemName": "sequence-reconstruction",
    "language": "java",
    "code": "class Solution {\n    public boolean sequenceReconstruction(int[] nums, List<List<Integer>> sequences) {\n        int n = nums.length;\n        int[] indegree = new int[n];\n        int topologySize = 0;\n        Map<Integer,List<Integer>> graph = new HashMap<>();\n        //init\n        for(List<Integer> sequence: sequences){\n            for(int i = 0; i < sequence.size() - 1; i ++){\n                int src = sequence.get(i) - 1;\n                int dest = sequence.get(i + 1) - 1;\n                \n                List<Integer> list = graph.getOrDefault(src, new ArrayList<>());\n                list.add(dest);\n                graph.put(src, list);\n                \n                indegree[dest] +=1;\n            }\n        }\n        \n        //use queue to add zero indegree\n        int zeroDegreeCount =0 ;\n        Queue<Integer> q = new LinkedList<>();\n        for(int i = 0; i < n; i ++){\n            if(indegree[i] == 0){\n                q.add(i);\n                zeroDegreeCount ++;\n            }\n        }\n        \n        //if zero indegree node > 1, then there will be more than one supersequence\n        if(zeroDegreeCount > 1) return false;\n        \n        while(!q.isEmpty()){\n            int node = q.poll();\n            topologySize ++;\n            if(graph.containsKey(node)){\n                int zeroDegree = 0;\n                for(Integer i: graph.get(node)){\n                    indegree[i] --;\n                    if(indegree[i] == 0){\n                        q.add(i);\n                        zeroDegree++;\n                    }\n                }\n                if(zeroDegree > 1) return false;\n            }\n        }\n        \n        if(topologySize < n) return false;\n        return true;\n        \n    }\n}"
}