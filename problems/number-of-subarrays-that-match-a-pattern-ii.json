{
    "problemName": "number-of-subarrays-that-match-a-pattern-ii",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    vector<int> zalgo(vector<int> &arr, vector<int> &pattern)\n    {\n        vector<int> s;\n        for(auto i : pattern)s.push_back(i);\n        s.push_back(2);\n        for(auto i : arr)s.push_back(i);\n        int n = s.size();\n        vector<int> z(n, 0);\n        int left = 0, right = 0;\n        for (int i = 1; i < n; i++)\n        {\n            if (i > right)\n            {\n                left = right = i;\n                while (right < n && s[right] == s[right - left])\n                {\n                    right++;\n                }\n                z[i] = right - left;\n                right--;\n            }\n            else\n            {\n                int ind = i - left;\n                if (z[ind] + i <= right)\n                {\n                    z[i] = z[ind];\n                }\n                else\n                {\n                    left = i;\n                    while (right < n && s[right] == s[right - left])\n                    {\n                        right++;\n                    }\n                    z[i] = right - left;\n                    right--;\n                }\n            }\n        }\n        return z;\n    }\n    int countMatchingSubarrays(vector<int> &nums, vector<int> &pattern)\n    {\n        int m = pattern.size();\n        vector<int> s;\n        for (int i = 0; i < nums.size() - 1; i++)\n        {\n            if (nums[i + 1] > nums[i])\n                s.push_back(1);\n            else if (nums[i + 1] < nums[i])\n                s.push_back(-1);\n            else\n                s.push_back(0);\n        }\n        vector<int> z = zalgo(s, pattern);\n        int ans = 0;\n        for (int i = pattern.size() + 1; i < z.size(); i++)\n        {\n            if (z[i] == pattern.size())\n                ans++;\n        }\n        return ans;\n    }\n};"
}