{
    "problemName": "substring-xor-queries",
    "language": "cpp",
    "code": "class Solution {\n    \n    void process(string &s, int size, unordered_map<int, vector<int>> &targets, vector<vector<int>> &res) {\n        int hash = 0;\n        for (int i = 0; i < size; i++) {\n            hash = hash * 2 + (s[i] - '0');\n        }\n        if (targets.count(hash)) {\n            for (auto i : targets[hash]) {\n                res[i] = {0, size - 1};\n            }\n            targets.erase(hash);\n        }\n        int p = 1 << (size - 1);\n        for (int r = size; r < s.size(); r++) {\n            int l = r - size + 1;\n            hash = (hash & ~p) * 2 + (s[r] - '0');\n            if (targets.count(hash)) {\n                for (auto i : targets[hash]) {\n                    res[i] = {l, r};\n                }\n                targets.erase(hash);\n            }\n        }\n    }\n    \npublic:\n    vector<vector<int>> substringXorQueries(string s, vector<vector<int>>& qs) {\n        // {size -> {target -> {indices}} }\n        unordered_map<int, unordered_map<int, vector<int>>> m;\n        for (int i = 0; i < qs.size(); i++) {\n            auto &q = qs[i];\n            int target = q[0] ^ q[1];\n            int size = (target == 0) ? 1 : (log2(target * 1.0) + 1);\n            m[size][target].push_back(i);\n        }\n        \n        vector<vector<int>> res(qs.size(), vector<int>(2, -1));\n        for (auto &[size, queries] : m) {\n            process(s, size, queries, res);\n        }\n        \n        return res;\n    }\n};"
}