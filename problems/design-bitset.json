{
    "problemName": "design-bitset",
    "language": "python3",
    "code": "class Bitset:\n\n    def __init__(self, size: int):\n        self.size = size\n        self.num = 0\n        self.ones = 0\n        self.MAX = (1 << self.size) - 1\n\n    def fix(self, idx: int) -> None:\n        if self.num & (1 << (self.size - idx - 1)) == 0:\n            self.ones += 1\n        self.num |= (1 << (self.size - idx - 1))\n\n    def unfix(self, idx: int) -> None:\n        if self.num & (1 << (self.size - idx - 1)) != 0:\n            self.ones -= 1\n        mask = self.MAX ^ (1 << (self.size - idx - 1))\n        self.num &= mask\n\n    def flip(self) -> None:\n        self.ones = self.size - self.ones\n        self.num ^= self.MAX\n        \n    def all(self) -> bool:\n        return self.num == self.MAX\n\n    def one(self) -> bool:\n        return self.num != 0\n\n    def count(self) -> int:\n        return self.ones\n\n    def toString(self) -> str:\n        res = ''\n        for i in range(self.size):\n            res += '1' if self.num & (1 << (self.size - i - 1)) else '0'\n        return res\n\n\n# Your Bitset object will be instantiated and called as such:\n# obj = Bitset(size)\n# obj.fix(idx)\n# obj.unfix(idx)\n# obj.flip()\n# param_4 = obj.all()\n# param_5 = obj.one()\n# param_6 = obj.count()\n# param_7 = obj.toString()"
}