{
    "problemName": "open-the-lock",
    "language": "cpp",
    "code": "class Solution {\npublic:\n\tint openLock(vector<string>& deadends, string target) {\n\t\tqueue<string> bfs;\n\t\tunordered_set<string> hash(deadends.begin(), deadends.end());\n\t\tunordered_set<string> visited;\n\n\t\tif (hash.find(\"0000\") != hash.end())\n\t\t\treturn -1;\n\n\t\tint depth = 0;\n\t\tbfs.push(\"0000\");\n\t\tvisited.insert(\"0000\");\n\n\t\twhile (!bfs.empty())\n\t\t{\n\t\t\tint siz = bfs.size();\n\n\t\t\tfor (int k = 0; k < siz; k++)\n\t\t\t{\n\t\t\t\tstring current_stage = bfs.front();\n\t\t\t\tbfs.pop();\n\n\t\t\t\tif (current_stage == target)\n\t\t\t\t{\n\t\t\t\t\treturn depth;\n\t\t\t\t}\n\n\n\t\t\t\tfor (int i = 0; i < 4; i++)\n\t\t\t\t{\n\t\t\t\t\tchar temp = current_stage[i];\n\t\t\t\t\tcurrent_stage[i] = temp == '9' ? '0' : temp + 1;\n\t\t\t\t\tif (hash.find(current_stage) == hash.end() && visited.find(current_stage) == visited.end())\n\t\t\t\t\t{\n\t\t\t\t\t\tbfs.push(current_stage);\n\t\t\t\t\t\tvisited.insert(current_stage);\n\t\t\t\t\t}\n\n\n\t\t\t\t\tcurrent_stage[i] = temp == '0' ? '9' : temp - 1;\n\t\t\t\t\tif (hash.find(current_stage) == hash.end() && visited.find(current_stage) == visited.end())\n\t\t\t\t\t{\n\t\t\t\t\t\tbfs.push(current_stage);\n\t\t\t\t\t\tvisited.insert(current_stage);\n\t\t\t\t\t}\n\t\t\t\t\tcurrent_stage[i] = temp;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdepth++;\n\t\t}\n\t\treturn -1;\n\t}\n};"
}