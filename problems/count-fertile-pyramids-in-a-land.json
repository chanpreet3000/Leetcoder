{
    "problemName": "count-fertile-pyramids-in-a-land",
    "language": "java",
    "code": "class Solution {\n    public int countPyramids(int[][] grid) {\n        final int m = grid.length;\n\t\tfinal int n = grid[0].length;\n\t\tfinal int[][] p = new int[m][n];\n\t\tfinal int[][] q = new int[m][n]; // inverse pyramids.\n\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tp[i][0] = 0;\n\t\t\tp[i][n - 1] = 0;\n\t\t\tq[i][0] = 0;\n\t\t\tq[i][n - 1] = 0;\n\t\t}\n\n\t\tfor (int j = 1; j < n - 1; j++) {\n\t\t\tp[m - 1][j] = 0;\n\t\t\tq[0][j] = 0;\n\t\t}\n\n\t\tint ans = 0;\n\t\t// compute pyramidal plots, starting from the bottom\n\t\tfor (int i = m - 2; i >= 0; i--) {\n\t\t\tfor (int j = 1; j < n - 1; j++) {\n\t\t\t\tif (grid[i][j] == 1 && grid[i + 1][j - 1] == 1 && grid[i + 1][j] == 1 && grid[i + 1][j + 1] == 1) {\n\t\t\t\t\tp[i][j] = Math.min(p[i + 1][j - 1], Math.min(p[i + 1][j], p[i + 1][j + 1])) + 1;\n\t\t\t\t\tans = ans + p[i][j];\n\t\t\t\t} else\n\t\t\t\t\tp[i][j] = 0;\n\t\t\t}\n\t\t}\n\n\t\t// compute inverse pyramidal plots, starting from the top\n\t\tfor (int i = 1; i < m; i++) {\n\t\t\tfor (int j = 1; j < n - 1; j++) {\n\t\t\t\tif (grid[i][j] == 1 && grid[i - 1][j - 1] == 1 && grid[i - 1][j] == 1 && grid[i - 1][j + 1] == 1) {\n\t\t\t\t\tq[i][j] = Math.min(q[i - 1][j - 1], Math.min(q[i - 1][j], q[i - 1][j + 1])) + 1;\n\t\t\t\t\tans = ans + q[i][j];\n\t\t\t\t} else\n\t\t\t\t\tq[i][j] = 0;\n\t\t\t}\n\t\t}\n\t\treturn ans;\n    }\n}"
}