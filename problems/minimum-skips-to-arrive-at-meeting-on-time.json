{
    "problemName": "minimum-skips-to-arrive-at-meeting-on-time",
    "language": "cpp",
    "code": "// #define DEBUG\n\nclass Solution {\npublic:\n    int minSkips(std::vector<int> const & dist, int speed, int hoursBefore) {\n        // plagiarizing from https://leetcode.com/problems/minimum-skips-to-arrive-at-meeting-on-time/discuss/1239980/Python-7-lines-dp-%2B-2liner-explained\n        // and https://leetcode.com/problems/minimum-skips-to-arrive-at-meeting-on-time/discuss/1242066/2D-DP\n        long long int maxDist = static_cast<long long>(speed) * hoursBefore;\n        if (std::accumulate(dist.begin(), dist.end(), 0) > maxDist) {\n            return -1;\n        }\n        #ifdef DEBUG\n        std::cout << \"can make an answer\" << \"\\n\";\n        #endif\n        int distLen = dist.size();\n        std::vector<std::vector<long long int>> dpMemo(distLen + 1, std::vector<long long int>(distLen + 1, 0));\n        for (int skip = 0; skip < distLen; skip++) {\n            if (dpHelp(dist, distLen - 1, skip, dpMemo, speed) <= maxDist) {\n                return skip;\n            }\n        }\n        return -1;\n    }\nprivate:\n    int dpHelp(std::vector<int> const & dist, int idx, int skip, std::vector<std::vector<long long int>> & dpMemo, int const speed) {\n        int const distLen = dist.size();\n        if (skip < 0) {\n            return INIT_MAX;\n        }\n        if (idx < 0) {\n            return 0;\n        }\n        if (0 == dpMemo[idx][skip]) {\n            // we need compute the result of (idx, skip)\n            dpMemo[idx][skip] = dist[idx] +\n                    std::min(dpHelp(dist, idx - 1, skip - 1, dpMemo, speed)/*at idx element, we make a skip operation*/,\n                            /*if we do not skip the rest, we first need round the costing time to upper bound*/\n                            (dpHelp(dist, idx - 1, skip, dpMemo, speed) + speed - 1) / speed * speed /*it means the cost time can make how long if keeping speed all the time*/);\n        }\n        return dpMemo[idx][skip];\n    }\nprivate:\n    long long int INIT_MAX = 1e9;\n};"
}