{
    "problemName": "closest-binary-search-tree-value",
    "language": "python3",
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def closestValue(self, root: Optional[TreeNode], target: float) -> int:\n        # # solution one\n        # self.res = []\n        # def inorder(root):\n        #     if not root:\n        #         return\n        #     inorder(root.left)\n        #     self.res.append(root.val)\n        #     inorder(root.right)\n        # inorder(root)\n        # diff = sys.maxsize\n        # ret = 0\n        # for index, number in enumerate(self.res):\n        #     if abs(number - target) < diff:\n        #         ret = number\n        #         diff = abs(number - target)\n        # return ret\n    \n        # \n        cur = root\n        diff = sys.maxsize\n        res = 0\n        while(cur):\n            if abs(cur.val - target) < diff:\n                res = cur.val\n                diff = abs(cur.val - target)\n            if cur.val > target:\n                cur = cur.left\n            elif cur.val < target:\n                cur = cur.right\n            else:\n                return cur.val\n        return res\n                \n                \n        \n    \n        \n        \n        "
}