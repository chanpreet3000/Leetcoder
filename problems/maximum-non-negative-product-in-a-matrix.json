{
    "problemName": "maximum-non-negative-product-in-a-matrix",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    int maxProductPath(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        vector<vector<pair<long long, long long>>> dp(m, vector<pair<long long, long long>>(n));\n        dp[0][0] = {grid[0][0], grid[0][0]};\n        for(int i = 1;i<m;i++){\n            dp[i][0].first = dp[i][0].second = dp[i-1][0].first * grid[i][0];            \n        }\n        for(int i = 1;i<n;i++){\n            dp[0][i].first = dp[0][i].second = dp[0][i-1].first * grid[0][i];\n        }\n        for(int i = 1;i<m;i++){\n            for(int j = 1;j<n;j++){\n                if(grid[i][j]>0){\n                    dp[i][j].first = min(dp[i-1][j].first, dp[i][j-1].first) * grid[i][j];\n                    dp[i][j].second = max(dp[i-1][j].second, dp[i][j-1].second) * grid[i][j];\n                }\n                else{\n                    dp[i][j].first = max(dp[i-1][j].second, dp[i][j-1].second) * grid[i][j];\n                    dp[i][j].second = min(dp[i-1][j].first, dp[i][j-1].first) * grid[i][j];\n                }                \n            }\n        }\n        if(dp[m-1][n-1].second<0)\n            return -1;\n        return (dp[m-1][n-1].second)%(1000000000 + 7);\n    }\n};"
}