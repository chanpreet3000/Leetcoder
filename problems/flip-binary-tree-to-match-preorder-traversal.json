{
    "problemName": "flip-binary-tree-to-match-preorder-traversal",
    "language": "java",
    "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n  \n  private int voyIndex = 0;\n  \n  private boolean recur(TreeNode node, int[] voyage, List<Integer> ans) {\n    if (node == null) return true;\n    if (voyage[voyIndex] != node.val) return false;\n    voyIndex++;\n    if (node.left != null && voyage[voyIndex] != node.left.val) {\n      ans.add(node.val);\n      return recur(node.right, voyage, ans) && recur(node.left, voyage, ans);\n    }\n    return recur(node.left, voyage, ans) && recur(node.right, voyage, ans);\n  }\n  \n  public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {\n    List<Integer> ans = new LinkedList<>();\n    if (recur(root, voyage, ans)) return ans;\n    ans = new LinkedList<>();\n    ans.add(-1);\n    return ans;\n  }\n}\n\n// 1 3 2 4 5 6 7"
}