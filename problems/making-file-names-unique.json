{
    "problemName": "making-file-names-unique",
    "language": "java",
    "code": "class Solution {\n    public String[] getFolderNames(String[] names) {\n        Map<String, Integer> nameCount = new HashMap<>(); // key -> name, value -> next available num if the 'key' appears again\n        String[] res = new String[names.length];\n        \n        for(int i = 0; i < names.length; i++) {\n            if(nameCount.containsKey(names[i])) { // if there is the same name available, then we need to append\n                int nextVal = nameCount.get(names[i]); // find which next avlbl int is there with this key -> name\n                StringBuilder sb = new StringBuilder(names[i]); // make sb out of names[i]\n                sb.append('(')\n                    .append(nextVal)\n                    .append(')');\n                \n                while(nameCount.containsKey(sb.toString())) { // if th NEW string formed is also present, the we need to APPEND next val again and keep doing it until we finds a unique name\n                    nextVal++;\n                    sb = new StringBuilder(names[i]);\n                    sb.append('(')\n                        .append(nextVal)\n                        .append(')');\n                }\n                \n                res[i] = sb.toString(); // add the newly formed name to res\n                nameCount.put(sb.toString(), 1); // since we have formed a new name (which is unique) so add it to map with 1 (if same name appears again, we will use 1 to append in front of it)\n                nameCount.put(names[i], nextVal + 1); // we need to add the original name with the next avalbl digit\n            } else { // if the map does not have this name, just add to map and res[]\n                res[i] = names[i];\n                nameCount.put(names[i], 1); // value 1 will be used if the next time the same names appear\n            }\n        }\n        \n        return res;\n    }\n}"
}