{
    "problemName": "path-with-maximum-gold",
    "language": "java",
    "code": "class Solution {\n    \n    public int getMaximumGold(int[][] grid) {\n    \n        int max = 0;\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                //System.out.println(\"Checking for gold at: \" + i + \", \" + j);\n                boolean[][] visited = new boolean[grid.length][grid[0].length];\n                int thisMax = maxGold(i, j, grid, visited);\n                if (thisMax > max) {\n                    max = thisMax;\n                }\n            }\n        }\n        \n        return max;\n    }\n    \n    private int maxGold(int x, int y, int[][] grid, boolean[][] visited) {\n        visited[x][y] = true;\n        if (grid[x][y] == 0) {\n            visited[x][y] = false;\n            return 0;\n        }\n       \n        int[][] coords = { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };\n        int maxGoldFound = 0;\n        for (int i = 0; i < coords.length; i++) {\n            int nextX = x + coords[i][0];\n            int nextY = y + coords[i][1];\n            if (inBounds(nextX, nextY, grid.length, grid[0].length) && !visited[nextX][nextY]) {\n                int gold = maxGold(nextX, nextY, grid, visited);\n                maxGoldFound = gold > maxGoldFound ? gold : maxGoldFound;\n            }\n        }\n        \n        visited[x][y] = false;\n        return grid[x][y] + maxGoldFound;\n    }\n    \n    private boolean inBounds(int x, int y, int m, int n) {\n        return 0 <= x && x < m && 0 <= y && y < n;\n    }\n}"
}