{
    "problemName": "longest-common-suffix-queries",
    "language": "cpp",
    "code": "class Node{\n    public:\n    map<char, Node*> mp;\n    set<pair<int, int>> st;\n    Node(){\n        mp.clear();\n        st.clear();\n    }\n};\n\nclass Trie{\n    Node *root;\npublic:\n    Trie(){\n        root = new Node();\n    }\n    \n    void insert(string &word, int ind){\n        Node *temp = root;\n        for(auto i : word){\n            if(temp->mp.find(i) == temp->mp.end()){\n                temp->mp[i] = new Node();\n            }\n            temp->st.insert({word.length(), ind});\n            temp = temp->mp[i];\n        }\n        temp->st.insert({word.length(), ind});\n    }\n    int suffix(string &word){\n        Node *temp = root;\n        for(auto i : word){\n            if(temp->mp.find(i) == temp->mp.end()){\n                cout<<word<<\" \"<<i<<endl;\n                break;\n            }\n            temp = temp->mp[i];\n        }\n        return temp->st.begin()->second;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> stringIndices(vector<string>& wordsContainer, vector<string>& wordsQuery) {\n        Trie *trie = new Trie();\n        for(auto &i: wordsContainer){\n            reverse(i.begin(), i.end());\n        }\n        for(int i = 0; i < wordsContainer.size(); i++){\n            trie->insert(wordsContainer[i], i);\n        }\n        vector<int> ans;\n        for(auto i : wordsQuery){\n            reverse(i.begin(), i.end());\n            ans.push_back(trie->suffix(i));\n        }\n        return ans;\n    }\n};"
}