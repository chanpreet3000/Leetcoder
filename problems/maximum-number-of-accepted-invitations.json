{
    "problemName": "maximum-number-of-accepted-invitations",
    "language": "java",
    "code": "class Solution {\n    /* max bitmask val is 10^200, too large to be represented \n    private int[][] grid;\n    boolean[] occupied;\n    public int maximumInvitations(int[][] grid) {\n        this.grid = grid;\n        int m = grid.length, n = grid[0].length;\n        occupied = new boolean[n];\n        return helper(0);\n    }\n    private int helper(int bIdx) {\n        if (bIdx == grid.length) {\n            return 0;\n        }\n        int res = 0;\n        for (int j = 0; j < grid[0].length; j++) {\n            if (grid[bIdx][j] == 1 && !occupied[j]) {\n                occupied[j] = true;\n                res = Math.max(res, 1 + helper(bIdx + 1));\n                occupied[j] = false;\n            }\n        }\n        res = Math.max(res, helper(bIdx + 1));\n        return res;\n    } */\n    // https://sites.google.com/site/indy256/algo/kuhn_matching2\n    private int[][] grid;\n    private int srcLen, targetLen;\n    private Integer[] assignedTo;\n    public int maximumInvitations(int[][] grid) {\n        this.grid = grid;\n        srcLen = grid.length;\n        targetLen = grid[0].length;\n        assignedTo = new Integer[targetLen];\n        int res = 0;\n        for (int src = 0; src < srcLen; src++) {\n            if (matchingPathFound(src, new HashSet<>())) {\n                res++;\n            }\n        }\n        return res;\n    }\n    private boolean matchingPathFound(int src, Set<Integer> srcVisited) {\n        srcVisited.add(src);\n        // iterate edges and further dfs\n        for (int target = 0; target < targetLen; target++) {\n            if (grid[src][target] == 0) {\n                continue;\n            }\n            Integer currentSrcAssignedTo = assignedTo[target];\n            if (currentSrcAssignedTo == null \n                // re-assign to another targaet? \n                || (!srcVisited.contains(currentSrcAssignedTo) && matchingPathFound(currentSrcAssignedTo, srcVisited))) {\n                assignedTo[target] = src;\n                return true;\n            }\n               \n        }\n        return false;\n    }\n    \n}"
}