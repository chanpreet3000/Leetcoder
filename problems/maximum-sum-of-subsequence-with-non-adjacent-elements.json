{
    "problemName": "maximum-sum-of-subsequence-with-non-adjacent-elements",
    "language": "cpp",
    "code": "const int N = 5 * 1e4 + 10;\nconst int MOD = 1e9 + 7;\n\nlong long seg[4 * N][2][2];\n\nvoid p(int ind){\n    // cout<<ind<<\"? \";\n    // cout<<seg[ind].left.tk<<\" \"<<seg[ind].left.nt<<\" : \";\n    // cout<<seg[ind].right.tk<<\" \"<<seg[ind].right.nt<<\"\\n\";\n}\n\nvoid comp(int ind){\n\n    auto n1 = seg[2 * ind + 1];\n    auto n2 = seg[2 * ind + 2];\n\n    seg[ind][0][0] = max({n1[0][0] + n2[0][0], n1[0][0] + n2[1][0], n1[0][1] + n2[0][0]})%MOD;\n    seg[ind][1][0] = max({n1[1][0] + n2[0][0], n1[1][0] + n2[1][0], n1[1][1] + n2[0][0]})%MOD;\n    seg[ind][0][1] = max({n1[0][0] + n2[0][1], n1[0][0] + n2[1][1], n1[0][1] + n2[0][1]})%MOD;\n    seg[ind][1][1] = max({n1[1][0] + n2[0][1], n1[1][0] + n2[1][1], n1[1][1] + n2[0][1]})%MOD;\n    p(ind);\n}\n\nvoid build(vector<int> &arr, int ind, int ss, int se){\n    if(ss == se){\n        seg[ind][0][0] = 0;\n        seg[ind][0][1] = 0;\n        seg[ind][1][0] = 0;\n        seg[ind][1][1] = arr[ss];\n        p(ind);\n        return;\n    }\n    long long mid = (ss + se)/2;\n    build(arr, 2 * ind + 1, ss, mid);\n    build(arr, 2 * ind + 2, mid + 1, se);\n    comp(ind);\n\n}\n\nvoid update(int ind, int ss, int se, int idx, int val){\n    if(ss == se){\n        seg[ind][0][0] = 0;\n        seg[ind][0][1] = 0;\n        seg[ind][1][0] = 0;\n        seg[ind][1][1] = val;\n        p(ind);\n        return;\n    }\n    long long mid = (ss + se)/2;\n    if(idx > mid){\n        update(2 * ind + 2, mid + 1, se, idx, val);\n    }else{\n        update(2 * ind + 1, ss, mid, idx, val);\n    }\n    comp(ind);\n}\n\n\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        long long ans = 0;\n        int n = nums.size();\n        build(nums, 0, 0, n - 1);\n        cout<<\"build done\\n\";\n        for(auto i : queries){\n            int pos = i[0], val= i[1];\n            update(0, 0, n - 1, pos, val);\n            ans += max({seg[0][0][0], seg[0][1][0], seg[0][0][1],seg[0][1][1]});\n            ans %= MOD;\n        }\n        return ans;\n    }\n};"
}