{
    "problemName": "most-frequent-prime",
    "language": "cpp",
    "code": "map<long long, long long> mp;\nvector<int> d8x = {-1, -1, 0, 1, 1, 1, 0, -1};\nvector<int> d8y = {0, 1, 1, 1, 0, -1, -1, -1};\nclass Solution {\npublic:\n    void helper(vector<vector<int>> &mat, vector<vector<int>> &vis,int x, int y, long long num, int k){\n        vis[x][y] = 1;\n        // cout<<x<<\" \"<<y<<\" \"<<num<<endl;\n        int _x = x + d8x[k], _y = y + d8y[k];\n        if(_x >=0 && _x < mat.size() && _y >= 0 && _y < mat[0].size()){\n            long long newNum = num * 10 + mat[_x][_y];\n            mp[newNum]++;\n            helper(mat, vis, _x, _y, newNum, k);\n        }\n    }\n    bool prime(int n){\n        for(int i = 2; i <= sqrt(n); i++){\n            if(n%i == 0)return  false;\n        }\n        return true;\n    }\n    int mostFrequentPrime(vector<vector<int>>& mat) {\n        mp.clear();\n        for(int i = 0; i < mat.size(); i++){\n            for(int j = 0; j < mat[0].size(); j++){\n                \n                for(int k = 0; k < 8; k++){\n                    vector<vector<int>> vis(mat.size(), vector<int>(mat[0].size(), 0));\n                    helper(mat, vis, i, j, mat[i][j], k);\n                }\n            }\n        }\n        // for(auto i : mp){\n        //     cout<<i.first<<\" \"<<i.second<<endl;\n        // }\n        // cout<<endl;\n        map<long long, long long> mp2;\n        int _max = -1, _maxn = -1;\n        for(auto i : mp){\n            if(prime(i.first)){\n                mp2[i.first] = mp2[i.second];\n                if(i.second >= _max){\n                    _max = i.second;\n                    _maxn = i.first;\n                }\n            }\n        }\n        return _maxn;\n    }\n};"
}