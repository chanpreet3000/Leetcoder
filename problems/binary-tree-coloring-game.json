{
    "problemName": "binary-tree-coloring-game",
    "language": "java",
    "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int count(TreeNode root, int x) {\n        if(root == null) {\n            return 0;\n        }    \n        \n        int ls = count(root.left, x);\n        int rs = count(root.right, x);\n        if(root.val == x) {\n            lc = ls;\n            rc = rs;\n        }\n        return ls + rs + 1;\n    }\n    \n    int lc, rc;\n    public boolean btreeGameWinningMove(TreeNode root, int n, int x) {\n        lc = 0; // left child\n        rc = 0; // right child\n        count(root, x);\n        \n        int nnpex = n - (lc + rc + 1); // number of nodes in parent excluding x\n        int max = Math.max(nnpex, Math.max(lc, rc));\n        \n        return max > (n / 2);\n    }\n}"
}