{
    "problemName": "find-subarray-with-bitwise-or-closest-to-k",
    "language": "cpp",
    "code": "int t[32];\nclass Solution {\npublic:\n    int check(vector<vector<int>> &pre, int ind, int mid){\n        for(int i = 0; i < 32; i++){\n            t[i] = pre[mid][i];\n        }\n        if(ind > 0){\n            for(int i = 0; i < 32; i++){\n                t[i] -= pre[ind - 1][i];\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < 32; i++){\n            if(t[i] == (mid - ind + 1)){\n                ans += (1<<i);\n            }\n        }\n        return ans;\n    }\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> pre(n, vector<int> (32, 0));\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < 32; j++){\n                if((nums[i] & (1<<j))){\n                    pre[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 1; i < n; i++){\n            for(int j = 0; j < 32; j++){\n                pre[i][j] += pre[i - 1][j];\n            }\n        }\n        int res = 1e9;\n        for(int i = 0; i < n; i++){\n            int lo = i, hi = n - 1, ans = n - 1;\n            while(lo <= hi){\n                int mid = (lo + hi)/2;\n                if(check(pre, i, mid) <= k){\n                    hi = mid - 1;\n                    ans = mid;\n                }else{\n                    lo = mid + 1;\n                }\n            }\n            res = min(res, abs(k - check(pre, i, ans)));\n            if(ans > i){\n                res = min(res, abs(k - check(pre, i, ans - 1)));\n            }\n        }\n        return res;\n    }\n};"
}