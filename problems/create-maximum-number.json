{
    "problemName": "create-maximum-number",
    "language": "java",
    "code": "class Solution {\n    private int[] maxArray(int[] nums, int k) {\n        int n = nums.length;\n        int[] ans = new int[k];\n        int idx = 0;\n        for(int i = 0; i < n; i++) {\n            // If we can still replace\n            while(n-i+idx > k && idx > 0 && ans[idx-1] < nums[i]) {\n                 idx--;\n            }\n            \n            if(idx < k) {\n                ans[idx++] = nums[i];\n            }\n        }\n        return ans;\n    }\n    \n    private boolean isLarger(int[] nums1, int i, int[] nums2, int j) {\n        while(i < nums1.length && j < nums2.length && nums1[i] == nums2[j]) {\n            i++;\n            j++;\n        }\n        \n        // if we reach the end of nums2, that means nums1 and nums2 share the same prefix,\n        // then we should use nums1 first since it may contain unknown digit\n        return j == nums2.length || (i < nums1.length && nums1[i] > nums2[j]);\n    }\n    \n    private int[] merge(int[] nums1, int[] nums2, int k) {\n        int[] ans = new int[k];\n        int i = 0;\n        int j = 0;\n        int idx = 0;\n        \n        while(idx < k) {\n            if(isLarger(nums1, i, nums2, j)) {\n                ans[idx] = nums1[i++];\n            } else {\n                ans[idx] = nums2[j++];\n            }\n            idx++;\n        }\n        \n        return ans;\n    }\n    \n    public int[] maxNumber(int[] nums1, int[] nums2, int k) {\n        int m = nums1.length;\n        int n = nums2.length;\n        int[] ans = new int[k];\n        \n        for(int i = Math.max(0, k-n); i <= Math.min(k, m); i++) {\n            int[] tmp = merge(maxArray(nums1, i), maxArray(nums2, k-i), k);\n            if(isLarger(tmp, 0, ans, 0)) {\n                ans = tmp;\n            }\n        }\n        \n        return ans;\n    }\n}"
}