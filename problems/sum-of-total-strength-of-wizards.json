{
    "problemName": "sum-of-total-strength-of-wizards",
    "language": "java",
    "code": "class Solution {\n    int mod = (int)1e9 + 7;\n    public int totalStrength(int[] strength) {\n        int res = 0, preSum = 0, n = strength.length;\n        Stack<Integer> stack = new Stack<>();\n        int[] preSumSum = new int[n + 2];\n        \n        for (int r = 0; r <= n; ++r) {\n            int cur = r < n ? strength[r] : 0;\n            preSum = (preSum + cur) % mod;\n            preSumSum[r + 1] = (preSum + preSumSum[r]) % mod;\n            \n            while (!stack.isEmpty() && strength[stack.peek()] > cur) {\n                int i = stack.pop(); // first element smaller than cur (index)\n                // in (l, r) i is the min\n                int l = stack.isEmpty() ? -1 : stack.peek();\n                \n                long lacc = l < 0 ? preSumSum[i] : preSumSum[i] - preSumSum[l];\n                long racc = preSumSum[r] - preSumSum[i];\n                \n                int ln = i - l, rn = r - i;\n                res = (int)(res + (racc * ln - lacc * rn) % mod * strength[i] % mod) % mod;\n            }\n            stack.push(r);\n        }\n        return (res + mod) % mod;\n    }\n}"
}