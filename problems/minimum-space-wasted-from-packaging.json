{
    "problemName": "minimum-space-wasted-from-packaging",
    "language": "java",
    "code": "\nclass Solution {\n    private static final int MOD = (int) (1e9+7);\n\n    public int minWastedSpace(int[] packages, int[][] boxes) {\n        \n        Arrays.sort(packages);\n        long[] prefixSum = new long[packages.length+1];\n        int n = packages.length;\n\n        for(int i=1; i<= packages.length; i++){\n            prefixSum[i] = prefixSum[i-1] + packages[i-1];\n        }\n        long ans= Long.MAX_VALUE;\n        for(int[] box: boxes){\n            Arrays.sort(box);\n            if(packages[n-1] > box[box.length-1]) continue;\n\n            long curr = 0;\n            int prev = 0;\n            for(int size: box){\n                if(size < packages[0]) continue;\n                final int next = maxSize(packages, size);\n                \n                final long sum = prefixSum[next+1]-prefixSum[prev];\n                \n                final long L = next-prev+1;\n                \n                final long add = (L * size) - sum;\n                \n                prev = next+1;\n                \n                curr = curr + add;\n                \n            }\n        \n        ans = Math.min(ans, curr);\n        \n\n        }\n\n        //System.out.println((int)(ans % 1e9+7));\n        //return ans == (long) 9e18 ? -1 : (int)ans;\n        return ans == Long.MAX_VALUE ? -1 : (int)(( ans + 1_000_000_007)% 1_000_000_007);\n\n    }\n\n    private static int maxSize(int[] p, int size){\n        int lo=0; \n        int hi=p.length-1;\n        while(lo<hi){\n            final int mid = lo + hi + 1 >>> 1;\n            if(p[mid] > size){\n                hi = mid-1;\n            }\n            else{\n                lo = mid;\n            }\n        }\n        return lo;\n    }\n}\n"
}