{
    "problemName": "squirrel-simulation",
    "language": "java",
    "code": "class Solution {\n    \n    static int dist(int a, int b) {\n        return Math.abs(a - b);\n    }\n    \n    static int delta(int[] nuts, int[] squirrel, int[] tree) {\n        return dist(nuts[0], tree[0]) + dist(nuts[1], tree[1])\n               - (dist(nuts[0], squirrel[0]) + dist(nuts[1], squirrel[1]));\n        \n    }\n    \n    public int minDistance(int height, int width, int[] tree, int[] squirrel, int[][] nuts) {\n        int sum = 0;\n        for (int[] n : nuts) {\n            sum += 2*(dist(n[0], tree[0]) + dist(n[1], tree[1]));\n        }\n        \n        int best = delta(nuts[0], squirrel, tree);\n        for (int[] n : nuts) {\n            best = Math.max(best, delta(n, squirrel, tree));\n        }\n        return sum - best;\n    }\n}\n\n/*\n4:14\n\nh and w given\n\nposition arrays for trees, squirrels and nuts\n\nmin number of steps for travelling to first nut and then\ntravelling\n\nsq -> nut_i0\nnut_i0 -> tree\n2*nut_ij -> tree // back and forth\n\nwe have four directions, it's easy to compute the distance.\n\nformula = sum_i 2*dist(tree, nut_i) - (dist(tree, nut_j) + dist(squirrel, nut_j)) \n\nfor one of the nuts, use dist(nut, tree) with dist(squirrel, tree).\n\nwe want to maximize dist(tree, nut_j) - dist(squirrel, nut_j)\n\n*/"
}