{
    "problemName": "set-intersection-size-at-least-two",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    int intersectionSizeTwo(vector<vector<int>>& intervals) {\n        int minSet = 0;\n        int begin = -1;\n        int end = -1;\n        \n        //sort intervals by second value\n        std::sort(intervals.begin(), intervals.end(), \n        [](auto const &a, auto const &b) { return a[1] < b[1]; });\n        \n        for(auto interval : intervals) {\n            //if our interval encompases our old interval, continue looping\n            if(begin >= interval[0]) {\n                continue;\n            }\n            // if we only have the end in the new interval, calculate a new most right first point\n            else if(end >= interval[0]){\n                begin = end;\n                end = interval[1];\n                if(begin == end) {\n                    begin = end-1;\n                }\n                minSet++;\n            }\n            //if we have nothing \n            else{\n                end = interval[1];\n                begin = interval[1] - 1;\n                minSet+=2;\n            }\n            cout << begin << \",\" << end << endl;\n        }\n        return minSet;\n    }\n};"
}