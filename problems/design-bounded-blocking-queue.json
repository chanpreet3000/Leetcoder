{
    "problemName": "design-bounded-blocking-queue",
    "language": "java",
    "code": "class BoundedBlockingQueue {\n    private ReentrantLock lock = new ReentrantLock();\n    private Condition full = lock.newCondition();\n    private Condition empty = lock.newCondition();\n    private int[] queue;\n    private int tail = 0;\n    private int head = 0;\n    private int size = 0;\n    public BoundedBlockingQueue(int capacity) {\n         queue = new int[capacity];\n    }\n    \n    public void enqueue(int element) throws InterruptedException {\n        lock.lock();\n        try {\n            while(size == queue.length) {\n                full.await();\n            }\n            queue[tail++] = element;\n            tail %= queue.length;\n            size++;\n            empty.signal();\n        } finally {\n            lock.unlock();\n        }\n    }\n    \n    public int dequeue() throws InterruptedException {\n        lock.lock();\n        try {\n            while(size == 0) {\n                empty.await();\n            }\n            int res = queue[head++];\n            head %= queue.length;\n            size--;\n            full.signal();\n            return res;\n        } finally {\n            lock.unlock();\n        }\n    }\n    \n    public int size() {\n        lock.lock();\n\t\ttry {\n\t\t\treturn this.size;\n\t\t} finally {\n\t\t\tlock.unlock();\n\t\t}\n    }\n}"
}