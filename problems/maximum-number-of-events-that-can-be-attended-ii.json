{
    "problemName": "maximum-number-of-events-that-can-be-attended-ii",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    int helper(vector<vector<int>>& events, vector<int> &arr, int k, int ind, vector<vector<int>> &dp){\n        if(k < 0)return -1e9;\n        if(ind == events.size())return 0;\n        if(dp[ind][k] != -1)return dp[ind][k];\n        return dp[ind][k] = max(helper(events, arr, k, ind + 1, dp), \n                   events[ind][2] + helper(events, arr, k - 1, arr[ind], dp));\n    }\n    int maxValue(vector<vector<int>>& events, int k) {\n        vector<vector<int>> dp(events.size() + 1, vector<int>(k + 1, -1));\n        sort(events.begin(), events.end());\n        int n = events.size();\n        vector<int> arr(n, 0);\n        for(int i = 0; i < n; i++){\n            int lo = i + 1, hi = n - 1, ans = n;\n            while(lo <= hi){\n                int mid = (lo + hi)/2;\n                if(events[mid][0] > events[i][1]){\n                    ans = mid;\n                    hi = mid - 1;\n                }else{\n                    lo = mid + 1;\n                }\n            }\n            arr[i] = ans;\n        }\n        return helper(events, arr, k, 0, dp);\n    }\n};"
}