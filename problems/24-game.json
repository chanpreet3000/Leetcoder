{
    "problemName": "24-game",
    "language": "java",
    "code": "class Solution {\n    public boolean judgePoint24(int[] cards) {\n        /*\n        input:[{1..9},{1..9},{1..9},{1..9}]\n        Solo son operadores binarios, por lo que se toman de a parejas. El tomar parejas también\n        hace implícito agrupar usando paréntesis.\n        1. Iterar sobre todas las posibles combinaciones de parejas de números no usados.\n        2. Para cada pareja, computar todas las operaciones posibles válidas (i.e. no división por 0)\n        3. Por cada resultado de las operaciones computadas, y cada pareja de números restantes,\n           intentar resolver el problema\n        4. Si no se encontró la solución usando la operación computada actual, descartarla e intentar con la siguiente.\n        5. Si solo queda un número y se encontró, retornar true.\n        6. Si después de haber pasado por todas las parejas y operaciones posible no se encontró una solución, retornar false.\n        */\n\n        return calcular(Arrays.stream(cards).mapToDouble(v -> v).boxed().toList());\n    }\n\n    private boolean calcular(final List<Double> nums) {\n        if(nums.size() == 1) {\n            return Math.abs(nums.get(0) - 24.0) <= 0.1;\n        }\n\n        for(int i = 0; i < nums.size(); i++) {\n            for(int j = i + 1; j < nums.size(); j++) {\n                final List<Double> restantes = new ArrayList<>();\n                for(int r = 0; r < nums.size(); r++) {\n                    if(r == i || r == j) {\n                        continue;\n                    }\n                    \n                    restantes.add(nums.get(r));\n                }\n\n                for(final var operacion : computarOperaciones(nums.get(i), nums.get(j))) {\n                    restantes.add(operacion);\n                    \n                    if(calcular(restantes)) {\n                        return true;\n                    }\n                    \n                    restantes.remove(restantes.size() - 1);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private List<Double> computarOperaciones(final double a, final double b) {\n        final List<Double> computos = new ArrayList<>();\n\n        computos.add(a + b);\n        computos.add(a * b);\n\n        computos.add(a - b);\n        computos.add(b - a);\n\n        if(b != 0.0) {\n            computos.add(a / b);\n        }\n\n        if(a != 0.0) {\n            computos.add(b / a);\n        }\n\n        return computos;\n    }\n}"
}