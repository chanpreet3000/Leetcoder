{
    "problemName": "binary-string-with-substrings-representing-1-to-n",
    "language": "cpp",
    "code": "class Solution {\n    int getNumForBinary(string binaryNum) {\n        int num = 0;\n        for (int i = 0; i < binaryNum.size(); i++) {\n            num += (binaryNum[i] - '0')*pow(2, binaryNum.size() - i - 1);\n        }\n        return num;\n    }\npublic:\n    bool queryString(string s, int n) {\n        set<string> createdNumbers;\n        string binaryRepresentationN = \"\";\n        int tempN = n;\n        while (tempN > 0) {\n            binaryRepresentationN += char((tempN%2) + '0');\n            tempN /= 2;\n        }\n        reverse(binaryRepresentationN.begin(), binaryRepresentationN.end());\n        int left = 0, right = 32;\n        int currLastPosition = 32;\n        while (currLastPosition >= 0) {\n            while (right < s.length()) {\n                string str = \"\";\n                for (int i = left; i <= right; i++) {\n                    str += s[i];\n                }\n                if (str.length() <= binaryRepresentationN.length() && str[0] != '0') {\n                    if (str.length() == binaryRepresentationN.length() && getNumForBinary(str) <= n) {\n                        createdNumbers.insert(str);\n                    } else if (str.length() < binaryRepresentationN.length()) {\n                        createdNumbers.insert(str);\n                    }\n                }\n                left++;\n                right++;\n            }\n            currLastPosition--;\n            right = currLastPosition;\n            left = 0;\n        }\n        return createdNumbers.size() == n;\n    }\n};"
}