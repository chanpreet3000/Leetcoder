{
    "problemName": "ip-to-cidr",
    "language": "python",
    "code": "class Solution:\n    def ipToCIDR(self, ip, n):\n        ans = []\n        num = self._getNum(ip.split('.'))\n\n        while n > 0:\n            lowbit = num & -num\n            count = self._maxLow(n) if lowbit == 0 else self._firstFit(lowbit, n)\n            ans.append(self._getCIDR(num, self._getPrefix(count)))\n            n -= count\n            num += count\n\n        return ans\n\n    def _getNum(self, x):\n        num = 0\n        for i in range(4):\n            num = num * 256 + int(x[i])\n        return num\n\n    # return max i s.t. 2^i < n\n    def _maxLow(self, n):\n        for i in range(32):\n            if 1 << i + 1 > n:\n                return 1 << i\n\n    def _firstFit(self, lowbit, n):\n        while lowbit > n:\n            lowbit >>= 1\n        return lowbit\n\n    def _getCIDR(self, num, prefix):\n        d = num & 255\n        num >>= 8\n        c = num & 255\n        num >>= 8\n        b = num & 255\n        num >>= 8\n        a = num & 255\n        return '.'.join([str(s) for s in [a, b, c, d]]) + '/' + str(prefix)\n\n  # e.g. count = 8 = 2^3 . prefix = 32 - 3 = 29\n  #      count = 1 = 2^0 . prefix = 32 - 0 = 32\n    def _getPrefix(self, count):\n        for i in range(32):\n            if count == 1 << i:\n                return 32 - i\n"
}