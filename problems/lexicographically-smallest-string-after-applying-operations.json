{
    "problemName": "lexicographically-smallest-string-after-applying-operations",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    string add(string s, int a)\n    {\n        for(int i=1; i<s.size(); i+=2)\n        {\n            s[i] = '0' + (((s[i] - '0') + a)%10);\n        }\n        return s;\n    }\n    string rotate(string s, int b)\n    {   \n        int n = s.size();\n        reverse(s.begin() + n - b, s.end());\n        reverse(s.begin(), s.begin() + n - b);\n        reverse(s.begin(), s.end());\n        \n        return s;\n    }\n        \n    \n    string findLexSmallestString(string s, int a, int b) {\n        int n = s.size();\n\n        queue<string>q;\n        q.push(s);\n        set<string>um;\n        while(!q.empty()){\n            string front = q.front();\n            um.insert(front);\n            q.pop();\n            string op1 = rotate(front , b);\n            string op2 = add(front , a);\n                \n            if(um.find(op1) == um.end()){\n                q.push(op1);\n                um.insert(op1);\n            }\n                \n                \n            if(um.find(op2) == um.end()){\n                q.push(op2);\n                um.insert(op2);\n            }\n                \n        }\n        \n        string ans = *um.begin();\n        \n        return ans;\n    }\n};"
}