{
    "problemName": "best-meeting-point",
    "language": "java",
    "code": "class Solution {\n    public int minTotalDistance(int[][] grid) {\n        List<Integer[]> list = new ArrayList<>();\n        List<Integer> horizontal = new ArrayList<>();\n        List<Integer> vertical = new ArrayList<>();\n        for(int i = 0;i<grid.length;i++){\n            for(int j=  0;j<grid[i].length;j++){\n                if(grid[i][j]==1){\n                    horizontal.add(j);\n                    vertical.add(i);\n                }\n            }\n        }\n        Collections.sort(horizontal);\n        Collections.sort(vertical);\n        \n        int size = vertical.size()/2;\n        int x = vertical.get(size);\n        int y = horizontal.get(size);\n        \n        int best = 0;\n        for(int i = 0;i<grid.length;i++){\n            for(int j = 0;j<grid[i].length;j++){\n                if(grid[i][j]==1){\n                    best+=Math.abs(x-i)+Math.abs(y-j);\n                }\n               \n            }\n        }\n        return best;\n    }\n    \n    private int dist(Integer[]first,Integer[]second){\n        return Math.abs(second[0]-first[0]) + Math.abs(second[1]-first[1]);\n    }\n}"
}