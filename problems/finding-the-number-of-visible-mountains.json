{
    "problemName": "finding-the-number-of-visible-mountains",
    "language": "kotlin",
    "code": "class Solution {\n    fun visibleMountains(peaks: Array<IntArray>): Int {\n        // transfer to interval, and sor it\n        val intervals = peaks.map { Pair(it[0] - it[1], it[0] + it[1])}\n        val sortAll = intervals.sortedBy { it.first }// + Pair(Int.MAX_VALUE, Int.MAX_VALUE)\n        // merge interval\n        var cnt = 0\n        var curMax = Pair(Int.MIN_VALUE, Int.MIN_VALUE)\n        var identical = Pair(Int.MIN_VALUE, Int.MIN_VALUE)\n        println(sortAll)\n        for(i in 0 until intervals.size) {\n            val cur = sortAll[i]\n            // val nxt = sortAll[i + 1]\n            if (cur.first == curMax.first) {\n                if (cur.second > curMax.second) { \n                    cnt += 1\n                    curMax = cur\n                } // bigger or equal\n                if (cur.second == curMax.second && identical != cur) {\n                    cnt -= 1\n                    cnt = maxOf(0, cnt)\n                    identical = cur\n                } // identical\n            } else {\n                // cur.first > curMax.first (definitely)\n                if(cur.second > curMax.second) {\n                    cnt += 1\n                    curMax = cur\n                } \n            }\n        }\n        return cnt\n    }\n}"
}