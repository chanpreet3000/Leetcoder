{
    "problemName": "find-number-of-coins-to-place-in-tree-nodes",
    "language": "cpp",
    "code": "typedef long long int ll;\nclass Solution {\npublic:\n    void dfs(vector<vector<ll>> &adj, map<ll, pair<vector<ll>, vector<ll>>> &mp, vector<int>& cost, ll root, ll par){\n        vector<ll> arr1, arr2;\n        arr1.push_back(cost[root]);\n        arr2.push_back(-cost[root]);\n        for(auto i : adj[root]){\n            if(i != par){\n                dfs(adj, mp, cost, i, root);\n                for(auto &i : mp[i].first){\n                    arr1.push_back(i);\n                }\n                for(auto &i : mp[i].second){\n                    arr2.push_back(i);\n                }\n            }\n        }\n        sort(arr1.rbegin(), arr1.rend());\n        sort(arr2.rbegin(), arr2.rend());\n        while(arr1.size() > 3){\n            arr1.pop_back();\n        }\n        while(arr2.size() > 3){\n            arr2.pop_back();\n        }\n        mp[root] = make_pair(arr1, arr2);\n    }\n    vector<ll> placedCoins(vector<vector<int>>& edges, vector<int>& cost) {\n        map<ll, pair<vector<ll>, vector<ll>>> mp;\n        ll n = edges.size()  + 1;\n        vector<vector<ll>> adj(n + 1, vector<ll>());\n        for(auto i : edges){\n            adj[i[0]].push_back(i[1]);\n            adj[i[1]].push_back(i[0]);\n        }\n        dfs(adj, mp, cost, 0, -1);\n        \n        vector<ll> ans(n, 0);\n        for(int i = 0; i < n; i++){\n            auto &it = mp[i];\n            for(auto &i : it.second) i *= -1;\n            auto &arr1 = it.first;\n            auto &arr2 = it.second;\n            sort(arr1.begin(), arr1.end());\n            sort(arr2.begin(), arr2.end());\n            // cout<<i<<endl;\n            // for(auto i : arr1){\n            //     cout<<i<<\" \";\n            // }\n            // cout<<endl;\n            // for(auto i : arr2){\n            //     cout<<i<<\" \";\n            // }\n            // cout<<endl;\n            ll sz = arr1.size();\n            if(sz < 3){\n                ans[i] = 1;\n            }else{\n                ll a = arr1[0] * arr1[1] * arr1[2];\n                ll b = arr1[2] * arr2[0] * arr2[1];\n                ans[i] = max({0LL, a, b});\n            }\n        }\n        return ans;\n    }\n};"
}