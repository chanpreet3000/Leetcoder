{
    "problemName": "decremental-string-concatenation",
    "language": "cpp",
    "code": "class Solution {\n    vector<vector<vector<int>>> dp;\npublic:\n    int solve(int idx,char s,char e,vector<string> & words){\n        if(idx>=words.size()) return 0 ; \n        if(dp[idx][s-'a'][e-'a']!=-1) return dp[idx][s-'a'][e-'a'];\n\n        int n = words[idx].size() ; \n        int res = 1e9 ; \n\n        if(e == words[idx].front()){\n            res = min(res,n-1+solve(idx+1,s,words[idx].back(),words));\n        }\n        else{\n            res  = min(res,n+solve(idx+1,s,words[idx].back(),words)) ; \n        }\n\n        if(s == words[idx].back() ){\n            res = min(res,n-1+solve(idx+1,words[idx].front(),e,words)) ;\n        }\n        else{\n            res =min(res,n+solve(idx+1,words[idx].front(),e,words)); \n        }\n        return dp[idx][s-'a'][e-'a'] = res ; \n    }\n    int minimizeConcatenatedLength(vector<string>& words) {\n        \n        int len = words[0].size() ; \n        int n = words.size() ; \n        dp.resize(n+1,vector<vector<int>>(26,vector<int>(26,-1))); \n\n        return len+solve(1,words[0].front(),words[0].back(),words); \n    }\n};"
}