{
    "problemName": "construct-binary-tree-from-string",
    "language": "java",
    "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode str2tree(String s) {\n        if (s == null) return null;\n        Stack<TreeNode> stack = new Stack<>();\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == ')') {\n                stack.pop();\n            } else if (c >= '0' && c <= '9' || c == '-') {\n                int start = i;\n                while (i + 1 < s.length() && Character.isDigit(s.charAt(i + 1))) i++;\n                \n                TreeNode cur = new TreeNode(Integer.valueOf(s.substring(start, i + 1)));\n                if (!stack.isEmpty()) {\n                    if (stack.peek().left != null) {\n                        stack.peek().right = cur;\n                    } else {\n                        stack.peek().left = cur;\n                    }\n                }\n                stack.push(cur);\n            }\n        }\n        return stack.isEmpty() ? null : stack.peek();\n    }\n}"
}