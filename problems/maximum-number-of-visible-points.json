{
    "problemName": "maximum-number-of-visible-points",
    "language": "java",
    "code": "class Solution {\n    // copied\n    // https://leetcode.com/problems/maximum-number-of-visible-points/discuss/877845/JAVA-Sliding-Window\n    public int visiblePoints(List<List<Integer>> points, int angle, List<Integer> location) {\n        List<Double> angles = new ArrayList<>();\n        int count = 0;\n        for (List<Integer> p : points) {\n            int dx = p.get(0) - location.get(0);\n            int dy = p.get(1) - location.get(1);\n            if (dx == 0 && dy == 0) { // edge case of same point\n                count++;\n                continue;\n            } \n            angles.add(Math.atan2(dy, dx) * (180 / Math.PI));\n        }\n        Collections.sort(angles);\n        List<Double> tmp = new ArrayList<>(angles);\n        // explain line 20:\n        // https://leetcode.com/problems/maximum-number-of-visible-points/discuss/877845/JAVA-Sliding-Window/720257\n        for (double d : angles) tmp.add(d + 360); // concatenate to handle edge case\n        int res = count;\n        for (int i = 0, j = 0; i < tmp.size(); i++) {\n            while (tmp.get(i) - tmp.get(j) > angle) {\n                j++;\n            }\n            res = Math.max(res, count + i - j + 1);\n        }\n        return res;\n    }\n}"
}