{
    "problemName": "find-longest-special-substring-that-occurs-thrice-ii",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    int maximumLength(string s) {\n        map<char, vector<int>> mp;\n        int n = s.length();\n        char prev = s[0];\n        int cnt = 0;\n        for(int i = 0; i < n; i++){\n            if(prev == s[i]){\n                cnt++;\n            }else{\n                mp[prev].push_back(cnt);\n                cnt = 1;\n            }\n            prev = s[i];\n        }\n        mp[prev].push_back(cnt);\n        \n        int ans = -1;\n        for(auto &it : mp){\n            sort(it.second.begin(), it.second.end());\n            int sz = it.second.size();\n            int res = -1, lo = 1, hi = 1e9;\n            \n            vector<int> suff = it.second;\n            for(int i = sz - 2; i >= 0; i --){\n                suff[i] += suff[i + 1];\n            }\n            \n            while(lo <= hi){\n                int mid = (lo + hi + 1)/2;\n                int ind = lower_bound(it.second.begin(), it.second.end(), mid) - it.second.begin();\n                int temp = 0;\n                if(ind <= sz - 1){\n                    temp = suff[ind] - (sz - ind) * mid + (sz - ind);\n                }\n                if(temp >= 3){\n                    lo = mid + 1;\n                    res = mid;\n                }else{\n                    hi = mid - 1;\n                }\n            }\n            // cout<<it.first<<\" : \";\n            // for(auto i : it.second){\n            //     cout<<i<<\" \";\n            // }\n            // cout<<endl;\n            // cout<<\"RES \"<<res<<endl;\n            ans = max(ans, res);\n        }\n        return ans;\n    }\n};"
}