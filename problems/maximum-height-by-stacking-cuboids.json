{
    "problemName": "maximum-height-by-stacking-cuboids",
    "language": "java",
    "code": "class Solution {\n    public int maxHeight(int[][] cuboids) {\n        // Sorting all Dimensions\n        for(int[] arr : cuboids) Arrays.sort(arr);\n\n        // sort all cuboids on basis of height, if same then breadth,\n        // if same then length\n        Arrays.sort(cuboids, (a, b) -> (b[2] - a[2] == 0 ? (b[1] - a[1] == 0 ? b[0] - a[0] : b[1] - a[1]) : b[2] - a[2]));\n\n        // use logic of LIS(Longest Increasing Subsequence)\n        return helperTab(cuboids);\n\n    }\n    public int helperTab(int[][] nums){\n        int n = nums.length;\n        int[] currRow = new int[n + 1];\n        int[] nextRow = new int[n + 1];\n\n        for(int curr = n - 1; curr >= 0; curr--){\n            for(int prev = curr - 1; prev >= -1; prev--){\n                int take = 0;\n                if(prev == -1 || check(nums[curr], nums[prev])) take = nums[curr][2] + nextRow[curr + 1];\n                int notTake = 0 + nextRow[prev + 1];\n                currRow[prev + 1] = Math.max(take, notTake);\n            }\n            nextRow = currRow;\n        }\n        return nextRow[0];\n    }\n    // These function checks whether current cuboid can be placed above \n    //the below one or not, on the basis on condition given in question.\n    public boolean check(int[] a, int[] b){\n        if(a[0] <= b[0] && a[1] <= b[1] && a[2] <= b[2]) return true;\n        else return false;\n    }\n}"
}