{
    "problemName": "get-biggest-three-rhombus-sums-in-a-grid",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    vector<int> getBiggestThree(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        set<int> arr;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                arr.insert(grid[i][j]);\n                for(int k = 1; k < n; k++){\n                    int l = j - k, r = j + k, d = i + 2 * k;\n                    if(l < 0 || r >= m || d >= n)break;\n                    int sum = 0;\n                    for(int p = 0, x = i, y = j; p <= k; p++, x++, y--)\n                        sum += grid[x][y];\n                    for(int p = 0, x = i, y = j; p <= k; p++, x++, y++)\n                        sum += grid[x][y];\n                    for(int p = 0, x = i + k, y = j - k; p <= k; p++, x++, y++)\n                        sum += grid[x][y];\n                    for(int p = 0, x = i + k, y = j + k; p <= k; p++, x++, y--)\n                        sum += grid[x][y];\n                    sum -= grid[i][j];\n                    sum -= grid[i + k][j - k];\n                    sum -= grid[i + k][j + k];\n                    sum -= grid[i + 2 * k][j];\n                    // cout<<i<<\" \"<<j<<\" \"<<k<<\" \"<<sum<<endl;\n                    arr.insert(sum);\n                }\n            }\n        }\n        vector<int> st(arr.begin(), arr.end());\n        sort(st.rbegin(), st.rend());\n        while(st.size() > 3)st.pop_back();\n        return st;\n    }\n};"
}