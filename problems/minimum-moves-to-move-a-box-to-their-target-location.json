{
    "problemName": "minimum-moves-to-move-a-box-to-their-target-location",
    "language": "python3",
    "code": "class Solution:\n    def minPushBox(self, grid: List[List[str]]) -> int:\n        pi=pj=bi=bj=0\n        m,n=len(grid),len(grid[0])\n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j]=='B':bi,bj=i,j\n                if grid[i][j]=='S':pi,pj=i,j\n\n        def bfs(r,c,pr,pc):\n            seen,res=set(),[]\n            q=deque([(pr,pc)])\n            while q:\n                for _ in range(len(q)):\n                    i,j=q.popleft()\n                    if (i,j) in seen:\n                        continue\n                    seen.add((i,j))\n                    if (i,j) in [(r+1,c),(r,c+1),(r-1,c),(r,c-1)]:\n                        res.append((i,j))\n                    for ii,jj in [(i+1,j),(i,j+1),(i-1,j),(i,j-1)]:\n                        if 0<=ii<m and 0<=jj<n and grid[ii][jj]!='#' and (ii,jj)!=(r,c):\n                            q.append((ii,jj))\n            return res\n\n        q=deque([(bi,bj,pi,pj)])\n        seen=set()\n        res=0\n        while q:\n            for _ in range(len(q)):\n                br,bc,pr,pc=q.popleft()\n                if grid[br][bc]=='T':\n                    return res\n                if (br,bc,pr,pc) in seen:\n                    continue\n                seen.add((br,bc,pr,pc))\n                for npr,npc in bfs(br,bc,pr,pc):\n                    dr,dc=br-npr,bc-npc\n                    nbr,nbc=br+dr,bc+dc\n                    if 0<=nbr<m and 0<=nbc<n and grid[nbr][nbc]!='#':\n                        q.append((nbr,nbc,br,bc))\n            res+=1\n        return -1"
}