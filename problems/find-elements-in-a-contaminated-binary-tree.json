{
    "problemName": "find-elements-in-a-contaminated-binary-tree",
    "language": "java",
    "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass FindElements {\n    Set<Integer> v;\n    \n    public FindElements(TreeNode root) {\n        v = new HashSet();\n        \n        recover(root, 0);\n    }\n    \n    private void recover(TreeNode root, int val) {\n        if(root == null) return;\n        \n        v.add(val);\n\n        recover(root.left, 2 * val + 1);\n        recover(root.right, 2 * val + 2);\n    }\n    \n    public boolean find(int target) {\n        return v.contains(target);\n    }\n}\n\n/**\n * Your FindElements object will be instantiated and called as such:\n * FindElements obj = new FindElements(root);\n * boolean param_1 = obj.find(target);\n */"
}