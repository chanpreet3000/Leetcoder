{
    "problemName": "strong-password-checker",
    "language": "java",
    "code": "class Solution {\n    private static final int MIN_LENGTH = 6;\n    private static final int MAX_LENGTH = 20;\n\n    public int strongPasswordChecker(String password) {\n        int numMissingComponents = getNumberOfMissingComponents(password);\n        int n = password.length();\n\n        if (n < MIN_LENGTH) {\n            return Math.max(numMissingComponents, MIN_LENGTH - n);\n        }\n\n        List<Integer> repeats = buildRepeatList(password);\n\n        int over = Math.max(0, n - MAX_LENGTH);\n        int numRemoval = over;\n\n        // use overage for repeat % 3 == 0 case. One removal would reduce one replacement\n        for (int i = 0; i < repeats.size() && over > 0; i++) {\n            int repeat = repeats.get(i);\n            if (repeat >= 3 && repeat % 3 == 0) {\n                repeats.set(i, repeat - 1);\n                over--;\n            }\n        }\n        // use overage for repeat % 3 == 1 case. Two removal would reduce one replacement\n        for (int i = 0; i < repeats.size() && over > 0; i++) {\n            int repeat = repeats.get(i);\n            if (repeat >= 3 && repeat % 3 == 1) {\n                repeats.set(i, repeat - Math.min(over, 2));\n                over -= Math.min(over, 2);\n            }\n        }\n\n        int numReplace = 0;\n        for (int repeat : repeats) {\n            if (over > 0 && repeat >= 3) {\n                int reduce = Math.min(over, repeat - 2);\n                over -= reduce;\n                repeat -= reduce;\n            }\n            if (repeat >= 3) {\n                numReplace += repeat / 3;\n            }\n        }\n\n        return Math.max(numReplace, numMissingComponents) + numRemoval;\n    }\n\n    private List<Integer> buildRepeatList(String password) {\n        List<Integer> repeats = new ArrayList<>();\n        for (int i = 0; i < password.length(); i++) {\n            if (i == 0 || password.charAt(i) != password.charAt(i - 1)) {\n                repeats.add(1);\n            } else {\n                int last = repeats.size() - 1;\n                repeats.set(last, repeats.get(last) + 1);\n            }\n        }\n        return repeats;\n    }\n\n    private int getNumberOfMissingComponents(String password) {\n        int digit = 1;\n        int upper = 1;\n        int lower = 1;\n        for (char c: password.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digit = 0;\n            }\n            if (Character.isLowerCase(c)) {\n                lower = 0;\n            }\n            if (Character.isUpperCase(c)) {\n                upper = 0;\n            }\n        }\n        return digit + upper + lower;\n    }\n}"
}