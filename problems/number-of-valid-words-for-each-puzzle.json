{
    "problemName": "number-of-valid-words-for-each-puzzle",
    "language": "cpp",
    "code": "class Solution {\nprivate:\n    struct Trie {\n        vector<vector<int>> dat{vector<int>(2)};\n        vector<int> c{0};\n        void insert(int x) {\n            int p=0;\n            for (int i=0; i<26; ++i) {\n                int k=(x>>i)&1;\n                if (dat[p][k]==0) {\n                    dat.push_back(vector<int>(2));\n                    dat[p][k]=dat.size()-1;\n                    c.push_back(0);\n                }\n                p=dat[p][k];\n            }\n            ++c[p];\n        }\n        int query(int x) {\n            int p=0;\n            for (int i=0; i<26; ++i) {\n                int k=(x>>i)&1;\n                if (dat[p][k]==0) return 0;\n                p=dat[p][k];\n            }\n            return c[p];\n        }\n    };\npublic:\n    vector<int> findNumOfValidWords(vector<string>& words, vector<string>& puzzles) {\n        auto encode=[](const string& w) {\n            int x=0, a=0;\n            for (char c : w) {\n                int k=c-'a';\n                if (((x>>k)&1)==0) ++a;\n                x|=(1<<k);\n            }\n            if (a>7) return -1;\n            return x;\n        };\n        Trie trie;\n        for (const auto& w : words) {\n            int c=encode(w);\n            if (c>-1)\n                trie.insert(c);\n        }\n        int n=int(puzzles.size());\n        vector<int> res(n);\n        int i=0;\n        for (const auto& p : puzzles) {\n            int f=(1<<(p[0]-'a'));\n            int cnt=trie.query(f);\n            int x=encode(p.substr(1));\n            for (int s=x; s; s=(s-1)&x) \n                cnt+=trie.query(s|f);\n            res[i]=cnt;\n            ++i;\n        }\n        return res;\n    }\n};"
}