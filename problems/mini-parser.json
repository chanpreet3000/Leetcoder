{
    "problemName": "mini-parser",
    "language": "java",
    "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * public interface NestedInteger {\n *     // Constructor initializes an empty nested list.\n *     public NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     public NestedInteger(int value);\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public boolean isInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     public Integer getInteger();\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public void add(NestedInteger ni);\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return empty list if this NestedInteger holds a single integer\n *     public List<NestedInteger> getList();\n * }\n */\nclass Solution {\n    public NestedInteger deserialize(String s) {\n        if(s.charAt(0)!='['){\n            return new NestedInteger(Integer.parseInt(s));\n        }\n        Deque<NestedInteger> stack= new ArrayDeque<>();\n        int num=0;\n        boolean negative= false;\n        for(int i=0; i<s.length(); i++){\n            char ch=s.charAt(i);\n            if(ch=='-'){\n                negative=true;\n            }else if (ch=='['){\n                stack.push(new NestedInteger());\n            } else if (Character.isDigit(ch)){\n                num=num*10+ ch-'0';\n            } else if (ch==']' || ch==','){\n                if(Character.isDigit(s.charAt(i-1))){\n                    if(negative){\n                    num*=-1;\n                   }\n                  stack.peek().add(new NestedInteger(num));\n                 num=0;\n                negative=false;\n                }\n                if(ch==']' && stack.size()>1){\n                    NestedInteger ni=stack.pop();\n                    stack.peek().add(ni);\n                }\n            }\n        }\n        return stack.pop();\n    }\n}"
}