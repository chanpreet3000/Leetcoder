{
    "problemName": "longest-repeating-substring",
    "language": "java",
    "code": "class Solution {\n    public int longestRepeatingSubstring(String s) {\n        int n = s.length();\n        int[][] dp = new int[n + 1][n + 1];\n        // dp[i][j] represents the length of the longest common suffix between substrings s[0:i] and s[0:j]. \n        // If i th char and j th char are equal, then the length of the longest common suffix between substrings s[0 to i] and s[0 to j] is\n        // the same as the length of the longest common suffix between substrings s[0 to i-1] and s[0 to j-1] plus 1.\n        int ans = 0;\n        // for (int i = 1; i <= n; i++) {\n        //     for (int j = i + 1; j <= n; j++) {\n        //         if (s.charAt(i - 1) == s.charAt(j - 1)) {\n        //             dp[i][j] = dp[i - 1][j - 1] + 1;\n        //             ans = Math.max(ans, dp[i][j]);\n        //         }\n        //     }\n        // }\n\n        for (int i = 2; i <= n; i++) {\n            for (int j = 1; j < i; j++) {\n                if (s.charAt(i - 1) == s.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                    ans = Math.max(ans, dp[i][j]);\n                }\n            }\n            // for (int j = 0; j < i; ++j) {\n            //     if (S[i] == S[j]) {\n            //         auto val = dp[i + 1][j + 1] = 1 + dp[i][j];\n            //         if (val > m_val) m_val = val;\n            //     }\n\t\t    // }\n        }\n        \n        return ans;\n    }\n}"
}