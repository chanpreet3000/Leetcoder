{
    "problemName": "minimum-degree-of-a-connected-trio-in-a-graph",
    "language": "python3",
    "code": "class Solution:\n    def minTrioDegree(self, n: int, edges: List[List[int]]) -> int:\n        # Init isEdge boolean array -> O(E)\n            # isEdge[i][j] = True if there exists an edge (i, j) [i to j]\n            # else False (edge does not exist)\n            # also init degrees array simultaneously\n                # this stores the degree of each node\n        # for each edge (i, j) -> O(E)\n            # for each node k -> O(V)\n                # if (i, k) and (j, k)\n                    # i,j,k trio!\n                    # find total degree of i,j,k\n                        # can use sum() to find degree of a node\n                    # update minDegree = min(minDegree, totalDegree - 6)\n        \n        isEdge = [[False] * n for _ in range(n)]\n        degrees = [0] * n\n        minDegree = [float('inf')]\n\n        for i in range(len(edges)):\n            edges[i][0] -= 1\n            edges[i][1] -= 1\n            fromNode = edges[i][0]\n            toNode = edges[i][1]\n\n            isEdge[fromNode][toNode] = True\n            isEdge[toNode][fromNode] = True\n            degrees[fromNode] += 1\n            degrees[toNode] += 1\n\n        for i, j in edges:\n            for k in range(n):\n                if (isEdge[i][k] and isEdge[j][k]):\n                    totalDegree = degrees[i] + degrees[j] + degrees[k]\n                    minDegree[0] = min(minDegree[0], totalDegree - 6)\n\n        return -1 if minDegree[0] == float('inf') else minDegree[0]"
}