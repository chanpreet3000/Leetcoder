{
    "problemName": "exam-room",
    "language": "golang",
    "code": "type ExamRoom struct {\n    TakenSeats []int\n    Size int\n}\n\n\nfunc Constructor(n int) ExamRoom {\n    return ExamRoom{TakenSeats: []int{}, Size: n}\n}\n\n\nfunc (this *ExamRoom) Seat() int {\n    if len(this.TakenSeats)==0 {\n        this.TakenSeats = append(this.TakenSeats,0)\n        return 0\n    }\n    \n    maxDistance:=0\n    maxDistanceSeat:=-1\n    maxDistanceIndex:=-1\n    \n    if this.Size-1-this.TakenSeats[len(this.TakenSeats)-1]>maxDistance {\n        maxDistance = this.Size-1-this.TakenSeats[len(this.TakenSeats)-1]\n        maxDistanceSeat = this.Size-1\n        maxDistanceIndex = len(this.TakenSeats)\n    }\n    \n    for i:=len(this.TakenSeats)-1; i>0; i-- {\n        if (this.TakenSeats[i]-this.TakenSeats[i-1])/2>=maxDistance {\n            maxDistance = (this.TakenSeats[i]-this.TakenSeats[i-1])/2\n            maxDistanceSeat = this.TakenSeats[i-1] + maxDistance\n            maxDistanceIndex = i\n        }\n    }\n\n    if this.TakenSeats[0] >= maxDistance {\n        maxDistance = this.TakenSeats[0]\n        maxDistanceSeat = 0\n        maxDistanceIndex = 0\n    }\n    \n    if maxDistanceIndex == len(this.TakenSeats) {\n        this.TakenSeats = append(this.TakenSeats,maxDistanceSeat)\n    } else if maxDistanceIndex == 0 {\n        this.TakenSeats = append([]int{maxDistanceSeat},this.TakenSeats...)\n    } else {\n        this.TakenSeats = append(this.TakenSeats[:maxDistanceIndex],this.TakenSeats[maxDistanceIndex-1:]...)\n        this.TakenSeats[maxDistanceIndex] = maxDistanceSeat\n    }\n    \n    return maxDistanceSeat\n}\n\n\nfunc (this *ExamRoom) Leave(p int)  {\n    for i:=0; i<len(this.TakenSeats); i++ {\n        if this.TakenSeats[i] == p {\n            this.TakenSeats = append(this.TakenSeats[:i],this.TakenSeats[i+1:]...)\n            break\n        }\n    }\n}\n\n\n/**\n * Your ExamRoom object will be instantiated and called as such:\n * obj := Constructor(n);\n * param_1 := obj.Seat();\n * obj.Leave(p);\n */"
}