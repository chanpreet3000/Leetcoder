{
    "problemName": "count-the-number-of-powerful-integers",
    "language": "cpp",
    "code": "typedef long long int ll;\nll dp[17][2];\nclass Solution {\npublic:\n    ll helper(string &s, ll limit, string &s2, ll ind, bool tight, string &temp){\n        if(s.length() < s2.length())return 0;\n        if(ind == s.length()){\n            // cout<<temp<<endl;\n            return 1;\n        }\n        if(dp[ind][tight] != -1)return dp[ind][tight];\n        \n        if(ind >= s.size() - s2.size()){\n            if(tight){\n                int num1 = s[ind] - '0';\n                int num2 = s2[ind - (s.size() - s2.size())] - '0';\n                if(num1 > num2) return helper(s, limit, s2, ind + 1 ,false, temp);\n                else if(num2 > num1)return 0;\n                else return helper(s, limit, s2, ind + 1, true, temp);\n            }else{\n                return helper(s, limit, s2, ind + 1 ,false, temp);\n            }\n        }else{\n            ll _max = tight?s[ind] - '0':9;\n            ll ans = 0;\n            ll dig = min(_max, limit);\n            for(ll i = 0; i <= dig; i++){\n                temp.push_back(i + '0');\n                ans += helper(s, limit, s2, ind + 1, (tight & (i == _max)), temp);\n                temp.pop_back();\n            }\n            return dp[ind][tight] = ans;\n        }\n    }\n    long long numberOfPowerfulInt(long long start, long long finish, int limit, string s) {\n        string temp = \"\";\n        memset(dp, -1, sizeof dp);\n        string a = to_string(finish);\n        ll ans1 = helper(a, limit, s, 0, true, temp);\n        \n        \n        memset(dp, -1, sizeof dp);\n        string b = to_string(start - 1);\n        ll ans2 = helper(b, limit, s, 0, true, temp);\n        return ans1 - ans2;\n        return 0;\n    }\n};"
}