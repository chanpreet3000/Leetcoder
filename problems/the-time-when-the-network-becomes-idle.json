{
    "problemName": "the-time-when-the-network-becomes-idle",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    bool check(vector<vector<int>> &adj, vector<int> &dist, vector<int>& patience, int mid){\n        int time = 0;\n        int n = adj.size();\n        for(int i = 1; i < n; i++){\n            int t = dist[i] * 2;\n            int extra = t/patience[i];\n            if(t%patience[i] == 0){\n                extra --;\n            }\n            int last = t - extra * patience[i];\n            time = max(time, t - last + t);\n        }\n        return time <= mid;\n    }\n    int networkBecomesIdle(vector<vector<int>>& edges, vector<int>& patience) {\n        int n = patience.size();\n        vector<vector<int>> adj(n);\n        for(auto i : edges){\n            adj[i[0]].push_back(i[1]);\n            adj[i[1]].push_back(i[0]);\n        }\n        vector<int> dist(n, 1e9);\n        priority_queue<int, vector<int>, greater<int>> pq;\n        pq.push(0);\n        dist[0] = 0;\n        while(!pq.empty()){\n            auto t = pq.top();\n            pq.pop();\n            \n            for(auto i : adj[t]){\n                if(dist[t] + 1 < dist[i]){\n                    dist[i] = dist[t] + 1;\n                    pq.push(i);\n                }\n            }\n        }\n        \n        long long lo = 0, hi = 1e9, ans = -1;\n        while(lo <= hi){\n            long long m = (lo + hi)/2;\n            if(check(adj, dist, patience, m)){\n                hi = m - 1;\n                ans = m;\n            }else{\n                lo = m + 1;\n            }\n        }\n        return ans + 1;\n    }\n};"
}