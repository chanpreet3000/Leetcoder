{
    "problemName": "make-lexicographically-smallest-array-by-swapping-elements",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    \n    void dfs(vector<vector<int>> &adj, vector<int> &vis, int curr, vector<int> &temp){\n        vis[curr] = 1;\n        temp.push_back(curr);\n        for(auto i : adj[curr]){\n            if(!vis[i]){\n                dfs(adj, vis, i, temp);\n            }\n        }\n    }\n    vector<int> lexicographicallySmallestArray(vector<int>& nums, int limit) {\n        int n = nums.size();\n        vector<pair<int, int>> arr;\n        for(int i = 0; i < n; i++){\n            arr.push_back({nums[i], i});\n        }\n        sort(arr.begin(), arr.end());\n        vector<vector<int>> adj(n);\n        for(int i = 1; i < n; i++){\n            if(arr[i].first - arr[i - 1].first <= limit){\n                adj[arr[i - 1].second].push_back(arr[i].second);\n                adj[arr[i].second].push_back(arr[i - 1].second);\n            }\n        }\n        vector<int> vis(n, 0);\n        vector<int> ans = nums;\n        for(int i = 0; i < n; i++){\n            if(!vis[i]){\n                vector<int> temp;\n                dfs(adj, vis, i, temp);\n                sort(temp.begin(), temp.end());\n                vector<int> val;\n                for(auto i : temp){\n                    val.push_back(nums[i]);\n                }\n                sort(val.begin(), val.end());\n                for(int i = 0; i < temp.size(); i++){\n                    ans[temp[i]] = val[i];\n                }\n                // cout<<i<<\" : \";\n                // for(auto it : temp){\n                //     cout<<it<<\" \";\n                // }\n                // cout<<endl;\n            }\n        }\n        return ans;\n    }\n};"
}