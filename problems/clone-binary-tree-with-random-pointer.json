{
    "problemName": "clone-binary-tree-with-random-pointer",
    "language": "python",
    "code": "# Definition for Node.\n# class Node(object):\n#     def __init__(self, val=0, left=None, right=None, random=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n#         self.random = random\n\nclass Solution(object):\n    def copyRandomBinaryTree(self, root):\n        if not root:   # Protection against a null root input  \n            return None\n\n        # Step 1. Create a copy of each node\n        copy = {}\n        stack= deque()\n        stack.append(root)\n        while stack:\n            node = stack.popleft()\n            copy[node] = NodeCopy(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n\n        # Step 2. Connect the copied nodes together\n        stack= deque()\n        stack.append(root)\n\n        while stack:\n            node = stack.popleft()\n            if node.left:\n                copy[node].left = copy[node.left]\n                stack.append(node.left)\n            if node.right:\n                copy[node].right = copy[node.right]\n                stack.append(node.right)\n            if node.random:\n                copy[node].random = copy[node.random]\n\n        return copy[root]\n        "
}