{
    "problemName": "construct-product-matrix",
    "language": "cpp",
    "code": "typedef long long int ll;\nclass Solution {\npublic:\n    vector<vector<int>> constructProductMatrix(vector<vector<int>>& grid) {\n        ll n = grid.size();\n        ll m = grid[0].size();\n        vector<ll> arr;\n        for(auto i : grid){\n            for(auto j : i){\n                arr.push_back(j);\n            }\n        }\n        vector<ll> pre(n * m, 1);\n        ll prod = 1;\n        for(ll i = 0; i < n * m; i++){\n            pre[i] = prod;\n            prod *= arr[i];\n            prod%=12345;\n        }\n        vector<ll> suff(n * m, 1);\n        prod = 1;\n        for(ll i = n * m - 1; i >=0; i--){\n            suff[i] = prod;\n            prod *= arr[i];\n            prod %= 12345;\n        }\n        vector<ll> res;\n        for(ll i = 0; i < n * m; i++){\n            long long t = ((pre[i]%12345) * (suff[i]%12345))%12345;\n            res.push_back(t);\n        }\n        vector<vector<int>> v = grid;\n        ll idx = 0;\n        for(ll i = 0; i < n; i++){\n            for(ll j = 0; j < m; j++){\n                v[i][j] = res[idx++];\n            }\n        }\n        return v;\n        \n    }\n};"
}