{
    "problemName": "ternary-expression-parser",
    "language": "python3",
    "code": "\nclass Solution:\n    def __init__(self):\n        self.question_mark = '?'\n        self.colon = \":\"\n        self.false_value = \"F\"\n        self.true_value = \"T\"\n        self.numbers = []\n        for i in range(10):\n            self.numbers.append(str(i))\n\n    def isValidAtomicExpression(self, window: str) -> bool:\n        if window[0] not in 'TF':\n            return False\n        if window[1] != self.question_mark:\n            return False\n        if ( window[2] not in 'TF' and \n            window[2] not in  self.numbers):\n            return False\n        if window[3] != self.colon:\n            return False\n        if (window[4] not in self.numbers and\n            window[4]  not in [self.true_value,  self.false_value ]):\n            return False\n        return True\n    def solveAtomic(self, s: str) -> str:\n        if s[0] == self.true_value:\n            return s[2]\n        else:\n            return s[4]\n\n    def parseTernary(self, expression: str) -> str:\n        \n        while len(expression) != 1:\n            j = len(expression) - 1\n            while not self.isValidAtomicExpression(expression[j-4:j + 1]):\n                j -= 1\n            expression = expression[:j - 4] + \\\n            self.solveAtomic(expression[j-4: j + 1]) + expression[j+1:]\n\n        return expression\n"
}