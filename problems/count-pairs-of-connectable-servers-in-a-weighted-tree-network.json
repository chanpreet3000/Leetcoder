{
    "problemName": "count-pairs-of-connectable-servers-in-a-weighted-tree-network",
    "language": "cpp",
    "code": "typedef long long int ll;\nclass Solution {\npublic:\n    ll dfs(vector<vector<pair<ll, ll>>> &adj, ll curr, ll par, ll weight, ll signalSpeed){\n        ll ans = 0;\n        if(weight%signalSpeed == 0)ans++;\n        for(auto i : adj[curr]){\n            if(i.first == par)continue;\n            ans += dfs(adj, i.first, curr, weight + i.second, signalSpeed);\n        }\n        return ans;\n    }\n    vector<int> countPairsOfConnectableServers(vector<vector<int>>& edges, int signalSpeed) {\n        ll n = edges.size() + 1;\n        vector<int> ans(n, 0);\n        vector<vector<pair<ll, ll>>> adj(n);\n        for(auto i : edges){\n            adj[i[0]].push_back({i[1], i[2]});\n            adj[i[1]].push_back({i[0], i[2]});\n        }\n        for(ll i = 0; i < n;  i++){\n            vector<ll> temp;\n            ll sum = 0;\n            for(auto it : adj[i]){\n                temp.push_back(dfs(adj, it.first, i, it.second, signalSpeed));\n                sum += temp.back();\n            }\n            for(auto it : temp){\n                ans[i] += it * (sum - it);\n            }\n            ans[i] /=2;\n        }\n        return ans;\n    }\n};"
}