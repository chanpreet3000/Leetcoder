{
    "problemName": "design-file-system",
    "language": "java",
    "code": "\n class FileSystem {\n\n        private HashMap<String, Integer> paths;\n\n        public FileSystem() {\n            paths = new HashMap<>();\n        }\n\n        public boolean createPath(String path, int value) {\n            // not invalid path\n            if(path == null || path.isEmpty() || !path.startsWith(\"/\") || path.length() == 1) return false;\n\n            // check if the path is exist\n            if(paths.containsKey(path)) {\n               return false;\n            }\n\n            // check if the parent is empty or exist\n            int lastSlashIndex = path.lastIndexOf(\"/\");\n            if(lastSlashIndex > 0) {\n                String parent = path.substring(0, lastSlashIndex);\n                if(!paths.containsKey(parent)) {\n                    return false;\n                }\n            }\n\n            paths.put(path, value);\n            return true;\n        }\n\n        public int get(String path) {\n            return paths.getOrDefault(path, -1);\n        }\n    }\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * FileSystem obj = new FileSystem();\n * boolean param_1 = obj.createPath(path,value);\n * int param_2 = obj.get(path);\n */"
}