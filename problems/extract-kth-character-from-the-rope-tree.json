{
    "problemName": "extract-kth-character-from-the-rope-tree",
    "language": "java",
    "code": "/**\n * Definition for a rope tree node.\n * class RopeTreeNode {\n *     int len;\n *     String val;\n *     RopeTreeNode left;\n *     RopeTreeNode right;\n *     RopeTreeNode() {}\n *     RopeTreeNode(String val) {\n *         this.len = 0;\n *         this.val = val;\n *     }\n *     RopeTreeNode(int len) {\n *         this.len = len;\n *         this.val = \"\";\n *     }\n *     RopeTreeNode(int len, TreeNode left, TreeNode right) {\n *         this.len = len;\n *         this.val = \"\";\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public char getKthCharacter(RopeTreeNode root, int k) {\n\n        // dfs; so use stack\n\n        StringBuilder sb = new StringBuilder();\n\n        Deque<RopeTreeNode> stack = new LinkedList<>();\n        \n        stack.push(root);\n\n        while (!stack.isEmpty()) {\n\n            RopeTreeNode curNode = stack.pop();\n\n            if (curNode.val.equals(\"\")) {  // internal node\n                if (curNode.right != null) {\n                    stack.push(curNode.right);\n                }\n                if (curNode.left != null) {\n                    stack.push(curNode.left);\n                }\n            } else {  // leaf node\n                sb.append(curNode.val);\n            }\n        }\n\n        return sb.charAt(k - 1);\n    }\n}"
}