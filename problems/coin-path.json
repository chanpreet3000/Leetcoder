{
    "problemName": "coin-path",
    "language": "csharp",
    "code": "public class Solution {\n    public IList<int> CheapestJump(int[] coins, int maxJump) {\n        var costs = Enumerable.Range(0, coins.Length).Select(x => int.MaxValue).ToArray();\n        //coins = coins.Select(x => x - 1).ToArray();\n        var queue = new Queue<(int i, int c, string p)>();\n        queue.Enqueue((0, 0,\"000\"));\n        costs[0] = 0;\n        var min = int.MaxValue;\n        var path = \"\";\n        while (queue.Any()) {\n            var cur = queue.Dequeue();\n            //Console.WriteLine($\"cur: {cur}; costs: {string.Join(\",\", costs)}; coins: {string.Join(\",\", coins)}\");\n            //Console.WriteLine($\"{cur}\");\n            if (cur.c > costs[cur.i]) continue;\n            if (cur.i == coins.Length - 1) {\n                if (cur.c < min) {\n                    min = cur.c;\n                    path = cur.p;\n                }\n                else if (cur.c == min && string.CompareOrdinal(cur.p, path) < 0) {\n                    path = cur.p;\n                }\n                continue;\n            }\n            /*if (coins[cur.i] != cur.i) {\n                var next = coins[cur.i];\n                if (coins[next] > 0 && costs[next] >= cur.c + next) {\n                        costs[next] = cur.c + next;\n                        queue.Enqueue((next, cur.c + next, $\"{cur.p}{next.ToString(\"D3\")}\"));\n                        //Console.WriteLine($\"Enqueue in jump: {(next, cur.c + next, $\"{cur.p}{next.ToString(\"D3\")}\")}\");\n                    }\n            }\n            else {\n                for (var i = 1; i <= maxJump && cur.i + i < coins.Length; i++) {\n                    if (coins[cur.i + i] > 0 && costs[cur.i + i] >= cur.c + cur.i + i) {\n                        costs[cur.i + i] = cur.c + cur.i + i;\n                        queue.Enqueue((cur.i + i, cur.c + cur.i + i, $\"{cur.p}{(cur.i + i).ToString(\"D3\")}\"));\n                        //Console.WriteLine($\"Enqueue in loop: {(cur.i + i, cur.c + cur.i + i, $\"{cur.p}{(cur.i + i).ToString(\"D3\")}\")}\");\n                    }\n                }\n            }*/\n            for (var i = 1; i <= maxJump && cur.i + i < coins.Length; i++) {\n                if (coins[cur.i + i] >= 0 && costs[cur.i + i] >= cur.c + coins[cur.i + i]) {\n                    costs[cur.i + i] = cur.c + coins[cur.i + i];\n                    queue.Enqueue((cur.i + i, cur.c + coins[cur.i + i], $\"{cur.p}{(cur.i + i).ToString(\"D3\")}\"));\n                    //Console.WriteLine($\"Enqueue in loop: {(cur.i + i, cur.c + cur.i + i, $\"{cur.p}{(cur.i + i).ToString(\"D3\")}\")}\");\n                }\n            }\n        }\n        var ret = new int[path.Length / 3];\n        for (var i = 0; i < path.Length / 3; i++) {\n            ret[i] = int.Parse(path.Substring(i * 3, 3)) + 1;\n        }\n        return ret;\n    }\n}"
}