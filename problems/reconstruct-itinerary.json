{
    "problemName": "reconstruct-itinerary",
    "language": "java",
    "code": "class Solution {\n    Map<String, Integer> ticketsCount;\n    Map<String, List<String>> adj;\n    List<String> itinerary;\n    List<List<String>> tickets;\n    \n    public List<String> findItinerary(List<List<String>> tickets) {\n        this.tickets = tickets;\n        ticketsCount = new HashMap<>();\n        adj = new HashMap<>();\n        \n        int ticketsLeft = 0;\n        for (List<String> ticket: tickets) {\n            ticketsLeft++;\n            String begin = ticket.get(0);\n            String end = ticket.get(1);\n            String ticketPresentation = begin + end;\n            ticketsCount.put(ticketPresentation, ticketsCount.getOrDefault(ticketPresentation, 0) + 1);\n            adj.putIfAbsent(begin, new ArrayList<>());\n            adj.get(begin).add(end);\n        }\n        \n        for (Map.Entry<String, List<String>> list: adj.entrySet()) {\n            Collections.sort(list.getValue());\n        }\n        \n        LinkedList<String> curr = new LinkedList<>();\n        curr.add(\"JFK\");\n        ticketsCount.put(\"JFK\", 1);\n        dfs(curr, \"\", \"JFK\", ticketsLeft);\n        \n        return itinerary;\n    }\n    \n    private boolean dfs(LinkedList<String> curr, String prevBegin, String prevEnd, int ticketsLeft) {\n        String ticketPresentation = prevBegin + prevEnd;\n        if (ticketsCount.getOrDefault(ticketPresentation, 0) == 0) return false;\n        \n        if (ticketsLeft == 0) {\n            StringBuilder sb = new StringBuilder();\n            for (String part: curr) sb.append(curr);\n            itinerary = new LinkedList<>(curr);\n            return true;\n        }\n        \n        ticketsCount.put(ticketPresentation, ticketsCount.get(ticketPresentation)-1);\n        \n        String nextBegin = prevEnd;\n        if (adj.containsKey(nextBegin)) {\n            for (String nextEnd: adj.get(nextBegin)) {\n                curr.add(nextEnd);\n                if (dfs(curr, nextBegin, nextEnd, ticketsLeft-1)) {\n                    return true;\n                }\n                curr.removeLast();\n            }\n    \n        }\n        \n        ticketsCount.put(ticketPresentation, ticketsCount.get(ticketPresentation)+1);\n        \n        return false;\n    }\n}"
}