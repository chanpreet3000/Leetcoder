{
    "problemName": "lowest-common-ancestor-of-a-binary-tree-ii",
    "language": "java",
    "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    boolean pFound = false;\n    boolean qFound = false;\n    \n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        TreeNode LCA = LCA(root, p, q);\n        return pFound && qFound ? LCA : null;\n    }\n    \n    private TreeNode LCA(TreeNode root, TreeNode p, TreeNode q) {\n        if (root == null) return root;\n        TreeNode left = LCA(root.left, p, q);\n        TreeNode right = LCA(root.right, p, q);\n        if (root == p) {\n            pFound = true;\n            return root;\n        }\n        if (root == q) {\n            qFound = true;\n            return root;\n        }\n        return left == null ? right : right == null ? left : root;\n    }\n}"
}