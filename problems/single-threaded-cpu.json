{
    "problemName": "single-threaded-cpu",
    "language": "cpp",
    "code": "class comp{\npublic:\n    \n    int operator()(const vector<int> &p, vector<int> &q) {\n        \n        if(p[1] > q[1])\n            return true;\n        \n        return p[1] == q[1] and p[2] > q[2];\n    }\n};\n\nclass Solution {\npublic:\n    \n    vector<int> getOrder(vector<vector<int>>& tasks) {\n        \n        priority_queue<vector<int>, vector<vector<int>>, comp> jobs;\n        \n        int n = tasks.size();\n        for(int i=0; i<n; i++) {\n            \n            tasks[i].push_back(i);\n        }\n        \n        sort(tasks.begin(), tasks.end());\n        \n        long long time = tasks[0][0];\n        int i = 1;\n        \n        vector<int> ans;\n        \n        jobs.push(tasks[0]);\n        \n        while(!jobs.empty()) {\n            \n            vector<int> currjob = jobs.top();\n            jobs.pop();\n            \n            ans.push_back(currjob[2]);\n            time += currjob[1];\n            \n           if(jobs.empty() and i<n and time < (long long)tasks[i][0])\n               time = tasks[i][0];\n            \n            while(i<n) {\n                \n                if(tasks[i][0] <= time) {\n                    \n                    jobs.push(tasks[i]);\n                    i++;\n                } else\n                    break;\n            }\n        }\n        \n        return ans;\n    }\n};"
}