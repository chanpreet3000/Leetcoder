{
    "problemName": "sliding-puzzle",
    "language": "java",
    "code": "class Solution {\n    \n    private static final int[][] DIRS = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n    \n    public int slidingPuzzle(int[][] board) {\n        int m = board.length, n = board[0].length;\n        StringBuilder sb = new StringBuilder();\n        for (int r = 0; r < m; r++) {\n            for (int c = 0; c < n; c++) {\n                sb.append(board[r][c]);\n            }\n        }\n        String initial = sb.toString();\n        Set<String> visited = new HashSet<>();\n        visited.add(initial);\n        Queue<String> queue = new LinkedList<>();\n        queue.add(initial);\n        int move = 0;\n        while (!queue.isEmpty()) {\n            for (int sz = queue.size(); sz > 0; sz--) {\n                String state = queue.poll();\n                if (state.equals(\"123450\")) {\n                    return move;\n                }\n                char[] chars = state.toCharArray();\n                int pos = state.indexOf('0');\n                int r = pos / n, c = pos % n;\n                for (int[] dir : DIRS) {\n                    int nr = r + dir[0];\n                    int nc = c + dir[1];\n                    if (nr < 0 || nr >= m || nc < 0 || nc >= n) {\n                        continue;\n                    }\n                    int nPos = nr * n + nc;\n                    char nch = chars[nPos];\n                    chars[pos] = nch;\n                    chars[nPos] = '0';\n                    String newState = new String(chars);\n                    if (!visited.contains(newState)) {\n                        visited.add(newState);\n                        queue.add(newState);\n                    }\n                    chars[pos] = '0';\n                    chars[nPos] = nch;\n                }\n            }\n            move++;\n        }\n        return -1;\n    }\n}"
}