{
    "problemName": "shortest-word-distance-iii",
    "language": "java",
    "code": "class Solution {\n    public int shortestWordDistance(String[] wordsDict, String word1, String word2) {\n        Map<String, List<Integer>> wordMap = new HashMap<>();\n        for(int i = 0;i<wordsDict.length;i++){\n            wordMap.computeIfAbsent(wordsDict[i], k-> new ArrayList<>());\n            wordMap.get(wordsDict[i]).add(i);\n        }\n        int min = Integer.MAX_VALUE;\n        if(word1.equals(word2)){\n            List<Integer> list = wordMap.get(word1);\n            for(int i = 0;i<list.size()-1;i++){\n                if(list.get(i+1) - list.get(i) < min){\n                    min = list.get(i+1) - list.get(i);\n                }\n            }\n        }\n        else{\n            List<Integer> list1 = wordMap.get(word1);\n            List<Integer> list2 = wordMap.get(word2);\n            for(int i : list1){\n                int val = binarySearch(list2, i);\n                if(val < min){\n                    min= val;\n                }\n            }\n        }\n        \n        return min;\n    }\n    \n    \n    int binarySearch(List<Integer> list, int target){\n        int lo = 0, hi = list.size()-1;\n        int sol = Integer.MAX_VALUE;\n        while(lo <= hi){\n            int mid = lo + (hi-lo)/2;\n            int val = list.get(mid);\n            if(val == target){\n                sol = mid;\n                break;\n            }\n            else if(val < target){\n                sol =Math.min(sol, Math.abs(val - target));\n                lo = mid+1;\n            }\n            else{\n                sol =Math.min(sol, Math.abs(val - target));\n                hi = mid-1;\n            }\n        }\n        return sol;\n    }\n}"
}