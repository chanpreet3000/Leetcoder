{
    "problemName": "strings-differ-by-one-character",
    "language": "java",
    "code": "class Solution {\n    class TrieNode {\n        Map<Character, TrieNode> children;\n        boolean end;\n        public TrieNode() {\n            children = new HashMap<>();\n        }\n    }\n    \n    public boolean differByOne(String[] dict) {\n        TrieNode root = buildTrie(dict);\n        for (String w : dict) {\n            if (search(root, w, 0, 0)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    public boolean search (TrieNode root, String w, int diff, int index) {\n        if (diff > 1) {\n            return false;\n        }\n        \n        if (index >= w.length()) {\n            return root.end && diff == 1;\n        }\n        \n        char c = w.charAt(index);\n        for (char key: root.children.keySet()) {\n            if (key == c ) {\n                if (search(root.children.get(key), w, diff, index+1)) {\n                    return true;\n                } \n            } else {\n                if (search(root.children.get(key), w, diff+1, index+1)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n        \n    }\n    \n    public TrieNode buildTrie(String[] dict) {\n        TrieNode root = new TrieNode();\n        for (String word : dict) {\n            TrieNode node = root;\n            for (Character c : word.toCharArray()) {\n                if (!node.children.containsKey(c)) {\n                    node.children.put(c, new TrieNode());\n                } \n                node = node.children.get(c);\n            }\n            node.end = true;\n        }\n        return root;\n    }\n}"
}