{
    "problemName": "binary-tree-longest-consecutive-sequence-ii",
    "language": "python3",
    "code": "class Solution:\n    length = 1\n\n    def longestConsecutive(self, root: Optional[TreeNode]) -> int:\n        self.dfs(root)\n        return self.length\n    \n    def check(self, root, child):\n        if root.val - child.val == 1:\n            self.dfs(child)\n            root.inc = max(child.inc + 1, root.inc)\n            self.length = max(self.length, root.inc + root.dec - 1)\n        elif root.val - child.val == -1:\n            self.dfs(child)\n            root.dec = max(child.dec + 1, root.dec)\n            self.length = max(self.length, root.inc + root.dec - 1)\n        else:\n            self.dfs(child)\n        print(root.val, root.inc, root.dec, child.val)\n        \n    def dfs(self, root):\n        if hasattr(root, 'inc') == False:\n            root.inc = 1\n            \n        if hasattr(root, 'dec') == False:\n            root.dec = 1\n            \n        if root.left == None and root.right == None:\n            root.inc = 1\n            root.dec = 1    \n            print(root.val, root.inc, root.dec)\n        elif root.left != None and root.right == None:\n            self.check(root, root.left)\n        elif root.left == None and root.right != None:\n            self.check(root, root.right)\n        elif root.left != None and root.right != None:\n            self.check(root, root.left)\n            self.check(root, root.right)"
}