{
    "problemName": "snail-traversal",
    "language": "javascript",
    "code": "/**\n * @param {number} rowsCount\n * @param {number} colsCount\n * @return {Array<Array<number>>}\n */\nArray.prototype.snail = function(rowsCount, colsCount) {\n    // Check for invalid input\n    if (rowsCount * colsCount !== this.length) {\n      return [];\n    }\n  \n    const result = [];\n    for (let col = 0; col < colsCount; col++) {\n    const currentRow = [];\n    for (let row = 0; row < rowsCount; row++) {\n        currentRow.push(this[col * rowsCount + row]);\n      }\n      if (col % 2 === 0) {\n        // If row is even, push the currentRow as it is\n        result.push(currentRow);\n      } else {\n        // If row is odd, reverse the currentRow before pushing\n        result.push(currentRow.reverse());\n      }\n    }\n//   output=result;\n\n  let out=result.reduce((arr1,arr2)=>{\n    arr2.forEach((ele,index)=>{\n        if(!arr1[index]){\n            arr1[index]=[];\n        }\n        arr1[index].push(ele);\n    })\n    return arr1\n  },[])\n  return out;\n  };\n\n// Example usage\n\n\n\n\n\n\n/**\n * const arr = [1,2,3,4];\n * arr.snail(1,4); // [[1,2,3,4]]\n */"
}