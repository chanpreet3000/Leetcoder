{
    "problemName": "process-tasks-using-servers",
    "language": "python3",
    "code": "import heapq\nclass Solution:\n    def assignTasks(self, servers: List[int], tasks: List[int]) -> List[int]:\n        ordered_servers = []\n        for i, server in enumerate(servers):\n            ordered_servers.append((server, i))\n        heapq.heapify(ordered_servers)\n       \n        res = [None] * len(tasks)\n        used = collections.defaultdict(set)\n        for i, task in enumerate(tasks):\n            wait = 0\n            if i in used:\n                for server in used[i]:\n                    heapq.heappush(ordered_servers, server)\n                del used[i]\n            if not ordered_servers:\n                wait = min(used.keys()) - i\n                next_server = self.get_from_used(wait+i, used)\n                heapq.heappush(ordered_servers, next_server)\n            curt = heapq.heappop(ordered_servers)\n            res[i] = curt[1]\n            used[i+task+wait].add(curt)\n        \n        return res\n    \n    def get_from_used(self, key, used):\n        curt_min = float('inf')\n        ans = None\n        for server in used[key]:\n            if server[0] < curt_min:\n                ans = server\n                curt_min = server[0]\n        if len(used[key]) == 1:\n            del used[key]\n        else:\n            used[key].remove(ans)\n        return ans\n            \n                \n            \n            \n            \n            \n            \n        "
}