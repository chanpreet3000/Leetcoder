{
    "problemName": "number-of-possible-sets-of-closing-branches",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    \n    vector<vector<int>> helper(vector<vector<int>> &A) {  \n       int n = A.size();  \n       vector<vector<int>> dist = A;\n\n       for (int k = 0; k < n; k++) {  \n           for (int i = 0; i < n; i++) {  \n               for (int j = 0; j < n; j++) {  \n                   if (dist[i][k] < 1e9 && dist[k][j] < 1e9)  \n                       dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);  \n               }  \n           }  \n       }  \n\n       return dist;  \n    }  \n    int numberOfSets(int n, int maxDistance, vector<vector<int>>& roads) {\n        int ans = 0;\n        for(int i = 0; i < pow(2, n); i++){\n            vector<vector<int>> adj(n, vector<int>(n, 1e9));\n            for(auto it : roads){\n                if((i & (1<<it[0])) > 0 && (i & (1<<it[1])) > 0){\n                    adj[it[0]][it[1]] = min(adj[it[0]][it[1]], it[2]);\n                    adj[it[1]][it[0]] = min(adj[it[1]][it[0]], it[2]);\n                }else{\n                    adj[it[0]][it[1]] = 1e9;\n                    adj[it[1]][it[0]] = 1e9;\n                }\n            }\n            vector<int> temp;\n            for(int j = 0; j < 32; j ++)if((i & (1<<j))>0)temp.push_back(j);\n            \n            int f = 0;\n            vector<vector<int>> dist = helper(adj);\n            \n            for(int j = 0; j < temp.size(); j++){\n                for(int k = j + 1; k < temp.size(); k++){\n                    if(dist[temp[j]][temp[k]] <= maxDistance || dist[temp[k]][temp[j]] <= maxDistance){\n                        \n                    }else{\n                        f = 1;\n                    }\n                }\n            }\n            // for(auto i : dist){\n            //     for(auto j : i){\n            //         cout<<j<<\" \";\n            //     }\n            //     cout<<endl;\n            // }\n            if(f == 0)ans++;\n            // if(f == 0){\n            //     cout<<\"YES\"<<\" \"<< i <<endl;\n            // }else{\n            //     cout<<\"NO\"<<\" \"<<i  <<endl;\n            // }\n        }\n        return ans;\n    }\n};"
}