{
    "problemName": "robot-room-cleaner",
    "language": "java",
    "code": "/**\n * // This is the robot's control interface.\n * // You should not implement it, or speculate about its implementation\n * interface Robot {\n *     // Returns true if the cell in front is open and robot moves into the cell.\n *     // Returns false if the cell in front is blocked and robot stays in the current cell.\n *     public boolean move();\n *\n *     // Robot will stay in the same cell after calling turnLeft/turnRight.\n *     // Each turn will be 90 degrees.\n *     public void turnLeft();\n *     public void turnRight();\n *\n *     // Clean the current cell.\n *     public void clean();\n * }\n \nitem: [1, 0]\nitem: [0, -1]\nitem: [-1, -1]\nitem: [0, 1]\nitem: [1, 2]\nitem: [-1, 0]\nitem: [0, 2]\nitem: [-1, 1]\nitem: [-2, 1]\nitem: [-2, 2]\n\n0 -> 2 -> 2\n1 -> 3 \n2 -> 0 \n3 -> 1\n\n\n */\n\nclass Solution {\n    private Set<List<Integer>> visited = new HashSet<>();\n    private static int[][] dirs = {{0,1},{1,0},{0,-1},{-1,0}};\n    public void cleanRoom(Robot robot) {\n        go(robot, 0, Arrays.asList(0, 0));\n    }\n    public void go(Robot robot, int dir, List<Integer> pos) {\n        robot.clean();\n        visited.add(pos);\n        for (int i = 0; i < 4; i++) {\n            int nextDir = (dir + i) % 4;\n            List<Integer> nextPos = Arrays.asList(pos.get(0) + dirs[nextDir][0],\n                                                  pos.get(1) + dirs[nextDir][1]);\n            if (!visited.contains(nextPos)) {\n                if (robot.move()) {\n                    go(robot, nextDir, nextPos);\n                    goBack(robot);\n                }\n            }\n            robot.turnRight();\n        }\n    }\n    private void goBack(Robot robot) {\n        robot.turnRight();\n        robot.turnRight();\n        robot.move();\n        robot.turnRight();\n        robot.turnRight();\n    }\n}"
}