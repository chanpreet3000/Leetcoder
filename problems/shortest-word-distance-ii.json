{
    "problemName": "shortest-word-distance-ii",
    "language": "python3",
    "code": "class WordDistance:\n\n    def __init__(self, wordsDict: List[str]):\n        self.mapping = defaultdict(list)\n        for index, word in enumerate(wordsDict):\n            self.mapping[word].append(index)\n\n    def shortest(self, word1: str, word2: str) -> int:\n        indices1, indices2 = self.mapping[word1], self.mapping[word2]\n        n1, n2 = len(indices1), len(indices2)\n        i, j = 0, 0\n        min_dist = float(\"inf\")\n        while i < n1 and j < n2:\n            first, second = indices1[i], indices2[j]\n            min_dist = min(min_dist, abs(first - second))\n            \n            next_first, next_second = None, None\n            if i+1 < n1:\n                next_first = indices1[i+1]\n            if j+1 < n2:\n                next_second = indices2[j+1]\n            if next_first is None and next_second is None:\n                i += 1\n                j += 1\n                continue\n            if next_first is None:\n                j += 1\n                continue\n            if next_second is None:\n                i += 1\n                continue\n            if next_first < next_second:\n                i += 1\n            else:\n                j += 1\n        return min_dist\n\n\n# Your WordDistance object will be instantiated and called as such:\n# obj = WordDistance(wordsDict)\n# param_1 = obj.shortest(word1,word2)"
}