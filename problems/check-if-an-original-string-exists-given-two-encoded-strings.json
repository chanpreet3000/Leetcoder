{
    "problemName": "check-if-an-original-string-exists-given-two-encoded-strings",
    "language": "python3",
    "code": "class Solution:\n    def possiblyEquals(self, s1: str, s2: str) -> bool:\n        def allcomb(s):\n            n = len(s)\n            if n == 1:\n                return [int(s)]\n            elif n == 2:\n                return [int(s), int(s[0]) + int(s[1])]\n            elif n == 3:\n                return [int(s), int(s[0]) + int(s[1]) + int(s[2]), int(s[:2]) + int(s[2]), int(s[0]) + int(s[1:])]\n        \n        @lru_cache(maxsize=None)\n        def solver(i, j, wild1, wild2):\n            if i == len(s1) and j == len(s2):\n                return wild1 == wild2\n            if i < len(s1) and s1[i].isdigit():\n                newi = i\n                while newi<len(s1) and s1[newi].isdigit():\n                    newi += 1\n                for k in allcomb(s1[i:newi]):\n                    if solver(newi, j, wild1 + k, wild2):\n                        return True\n            elif j < len(s2) and s2[j].isdigit():\n                newj = j\n                while newj<len(s2) and s2[newj].isdigit():\n                    newj += 1\n                for k in allcomb(s2[j:newj]):\n                    if solver(i, newj, wild1, wild2+k):\n                        return True\n            else:\n                if wild1 > wild2 and j < len(s2):\n                    return solver(i, j + 1, wild1 - wild2 - 1, 0)\n                elif wild1 < wild2 and i < len(s1):\n                    return solver(i + 1, j, 0, wild2 - wild1 - 1)\n                elif i < len(s1) and j < len(s2) and s1[i] == s2[j]:\n                    return solver(i + 1,j + 1,0,0)\n            return False\n        return solver(0,0,0,0)\n                    \n        \n                \n        \n                \n        \n        "
}