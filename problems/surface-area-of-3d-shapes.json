{
    "problemName": "surface-area-of-3d-shapes",
    "language": "java",
    "code": "class Solution {\n    public int surfaceArea(int[][] grid) {\n        int sa = 0;\n        for(int r = 0;  r < grid.length;  r++){\n            for(int c = 0;  c < grid[r].length;  c++){\n                if (grid[r][c] == 0) continue;\n                sa += 1;        // Bottom\n                sa += north(grid, r, c);\n                sa += east(grid, r, c);\n                sa += south(grid, r, c);\n                sa += west(grid, r, c);\n                sa += 1;        // Top\n            }\n        }\n        return sa;\n    }\n    \n    private int north(int[][] grid, int r, int c){\n        if (r == 0) return grid[r][c];\n        return grid[r][c] <= grid[r - 1][c] ? 0 : grid[r][c] - grid[r - 1][c];\n    }\n    \n    private int east(int[][] grid, int r, int c){\n        if (c == grid[r].length - 1) return grid[r][c];\n        return grid[r][c] <= grid[r][c + 1] ? 0 : grid[r][c] - grid[r][c + 1];\n    }\n    \n    private int south(int[][] grid, int r, int c){\n        if (r == grid.length - 1) return grid[r][c];\n        return grid[r][c] <= grid[r + 1][c] ? 0 : grid[r][c] - grid[r + 1][c];\n    }\n    \n    private int west(int[][] grid, int r, int c){\n        if (c == 0) return grid[r][c];\n        return grid[r][c] <= grid[r][c - 1] ? 0 : grid[r][c] - grid[r][c - 1];\n    }\n}"
}