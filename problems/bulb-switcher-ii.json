{
    "problemName": "bulb-switcher-ii",
    "language": "typescript",
    "code": "function flipLights(n: number, presses: number): number {\n    let start : string = \"1\";\n    start = start.repeat(n);\n    let queue = [ start ];\n    let map : Map<number, Set<string>> = new Map<number, Set<string>>( );\n\n    let levels : Array<number> = [ 0 ];\n    let level : number = 0;\n    //console.log(\"LEVEL \" + level);\n\n    if ( presses === 0 ) return 1;\n\n    while ( queue.length > 0 ) {\n        const cur = queue.shift();\n\n        if ( cur == null ) continue;\n\n        const newLevel = levels.shift()!;\n\n        if ( newLevel > level ) {\n            level = newLevel;\n            //console.log(\"LEVEL \" + level);\n        }\n\n\n        // Neighbors\n        let nextMoves : Array<string> = getMoves(cur, n);\n\n        for ( let neighbor of nextMoves ) {\n            if ( level < presses && (map.get(level + 1) == null || !map.get(level + 1)!.has(neighbor)) ) {\n                //console.log(\"n \" + neighbor);\n                queue.push(neighbor);\n                levels.push(level + 1);\n\n                if ( !map.has(level + 1) )\n                    map.set(level + 1, new Set<string>());\n\n                map.get(level + 1)!.add(neighbor);\n            }\n        }\n    }\n\n    return map.get(presses)!.size;\n};\n\nfunction getMoves(cur: string, n: number) : Array<string> {\n    let nextMoves : Array<string> = new Array<string>(4).fill(\"\");\n\n    let flip = false;\n    for ( let i = 0 ; i < n ; i++ ) {\n        const dig = cur.charAt(i);\n\n        //Button 1: Flips the status of all the bulbs.\n        nextMoves[0] += flipped(dig);\n\n        //Button 2: Flips the status of all the bulbs with even labels (i.e., 2, 4, ...).\n        flip = i % 2 != 0;\n        nextMoves[1] += (flip ? flipped(dig) : dig);\n\n        //Button 3: Flips the status of all the bulbs with odd labels (i.e., 1, 3, ...).\n        flip = i % 2 == 0;\n        nextMoves[2] += (flip ? flipped(dig) : dig);\n\n        //Button 4: Flips the status of all the bulbs with a label j = 3k + 1 where k = 0, 1, 2, ...\n        flip = i % 3 === 0;\n        nextMoves[3] += (flip ? flipped(dig) : dig);\n    }\n\n    return nextMoves;\n}\n\nfunction flipped(dig: string) : string {\n    return dig === '1' ? '0' : \"1\";\n}"
}