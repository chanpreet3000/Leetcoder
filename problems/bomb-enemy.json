{
    "problemName": "bomb-enemy",
    "language": "java",
    "code": "class Solution {\n    //O(n*m* max(n,m))\n    public int maxKilledEnemies(char[][] grid) {\n        int n = grid.length;\n        int m = grid[0].length;\n        int[] cols = new int[m];//previous enemy in this col\n        int max = 0;\n        \n        for (int i = 0; i < n; i++) {\n            int row = 0;//previous enemy in this row\n            for (int j = 0; j < m; j++) {\n                int total = row + cols[j];\n                //Enemy E\n                //calculate current row left so far, cols[] so far\n                //for loop: row to the right,\n                //for loop: col to the bottom\n                if(grid[i][j] == 'E') {\n                    row++;\n                    cols[j]++;\n                }\n                else if(grid[i][j] == '0') {\n                    //row to the right\n                    for (int k = j + 1; k < m && grid[i][k] != 'W'; k++) {\n                        if(grid[i][k] == 'E') {\n                            total++;\n                        }\n                    }\n                    //col to the bottom\n                    for (int p = i + 1; p < n && grid[p][j] != 'W'; p++) {\n                        if(grid[p][j] == 'E') {\n                            total++;\n                        }\n                    }\n                    max = Math.max(max, total);\n                }\n                // Wall\n                //row reset 0, cols reset\n                else if(grid[i][j] == 'W') {\n                    row = 0;\n                    cols[j] = 0;\n                }\n            }\n        }\n        return max;\n    }\n}"
}