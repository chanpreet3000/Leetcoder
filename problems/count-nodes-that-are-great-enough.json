{
    "problemName": "count-nodes-that-are-great-enough",
    "language": "cpp",
    "code": "#include <algorithm>\n#include <vector>\n#include <iterator>\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n  int dfs(TreeNode *root, int k, std::vector<int>* visited) {\n    if (!root) return 0;\n    int res = 0;\n    std::vector<int> lvisited, rvisited;\n    if (root->left) {\n      res += dfs(root->left, k, &lvisited);\n    }\n    if (root->right) {\n      res += dfs(root->right, k, &rvisited);\n    }\n    visited->insert(visited->end(), lvisited.begin(), lvisited.end());\n    visited->insert(visited->end(), rvisited.begin(), rvisited.end());\n    std::sort(visited->begin(), visited->end());\n    visited->resize(std::min(k, (int)visited->size()));\n    if (visited->size() >= k && visited->back() < root->val) res += 1;\n    visited->push_back(root->val);\n    return res;\n  }\n  int countGreatEnoughNodes(TreeNode* root, int k) {\n    std::vector<int> visited;\n    return dfs(root, k, &visited);\n  }\n};"
}