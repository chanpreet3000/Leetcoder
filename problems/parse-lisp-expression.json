{
    "problemName": "parse-lisp-expression",
    "language": "python3",
    "code": "class Solution:\n    def evaluate(self, expression: str) -> int:\n        tokens = tuple(filter(bool, re.split(r'\\s+|(\\()|(\\))', expression)))\n        variables = defaultdict(list)\n        scope = deque()\n        \n        def compute(i):\n            if tokens[i][0].isalpha():\n                return i + 1, variables[tokens[i]][-1]\n            if tokens[i][0].isdigit() or tokens[i][0] == '-':\n                return i + 1, int(tokens[i])\n            command = tokens[i + 1]\n            if command in {'add', 'mult'}:\n                i, oprand1 = compute(i + 2)\n                i, oprand2 = compute(i)\n                result = (oprand1 + oprand2 if command == 'add'\n                                            else oprand1 * oprand2)\n                return i + 1, result\n            i += 2\n            scope.append(set())\n            while tokens[i][0].isalpha() and tokens[i + 1] != ')':\n                name = tokens[i]\n                i, value = compute(i + 1)\n                if name in scope[-1]:\n                    variables[name][-1] = value\n                else:\n                    scope[-1].add(name)\n                    variables[name].append(value)\n            i, result = compute(i)\n            for name in scope[-1]:\n                variables[name].pop()\n            scope.pop()\n            return i + 1, result\n        \n        return compute(0)[1]"
}