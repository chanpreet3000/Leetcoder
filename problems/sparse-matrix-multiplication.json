{
    "problemName": "sparse-matrix-multiplication",
    "language": "python3",
    "code": "class Solution:\n    #def multiply(self, mat1: List[List[int]], mat2: List[List[int]]) -> List[List[int]]:\n    def multiply(self, A: List[List[int]], B: List[List[int]]) -> List[List[int]]:\n        if not A or not A[0] or not B or not B[0]:\n            return [[]]\n        sparse_A = self.get_none_zero(A)\n        sparse_B = self.get_none_zero(B)\n        \n        n, m, k = len(A), len(A[0]), len(B[0])\n        C = [[0 for _ in range(k)] for _ in range(n)]\n        \n        # the muliplication is based on the items in the two dictionaries. \n        for i, j in sparse_A:  # CI, RJ\n            for x, y in sparse_B: # CX, RY   RJ == CX, then we can perform multiplicaiton\n                if j == x:\n                    C[i][y] += A[i][j] * B[x][y]\n        return C\n\n    def get_none_zero(self, A):\n        return set([(i, j) for i in range(len(A)) for j in range(len(A[0])) if A[i][j]])\n    \n    \"\"\"\n    def get_none_zero(self, A):\n        res = set()\n        n, m = len(A), len(A[0])\n                \n        for i in range(n):\n            for j in range(m):\n                if A[i][j] != 0: \n                    res.add((i, j))\n                    \n        return res\n    \"\"\""
}