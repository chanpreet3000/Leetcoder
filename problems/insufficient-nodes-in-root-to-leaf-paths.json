{
    "problemName": "insufficient-nodes-in-root-to-leaf-paths",
    "language": "java",
    "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode sufficientSubset(TreeNode root, int limit) {\n        TreeNode dummy = new TreeNode(0);\n        dummy.left = root;\n        helper(dummy, 0, limit);\n        return dummy.left;\n    }\n    \n    public int helper(TreeNode root, int sum, int limit) {\n        if (root == null) return 0;\n        sum += root.val;\n        \n        int left = helper(root.left, sum, limit);\n        int right = helper(root.right, sum, limit);\n        \n        int pathSum = root.left == null && root.right == null ? 0 : Math.max(root.left == null ? Integer.MIN_VALUE : left, root.right == null ? Integer.MIN_VALUE : right);\n        \n        if (left + sum < limit) root.left = null;\n        if (right + sum < limit) root.right = null;\n        \n        return pathSum + root.val;\n        \n    }\n}"
}