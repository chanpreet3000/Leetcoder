{
    "problemName": "design-compressed-string-iterator",
    "language": "python",
    "code": "class StringIterator(object):\n\n    def __init__(self, compressedString):\n        \"\"\"\n        :type compressedString: str\n        \"\"\"\n        self.string = compressedString\n        self.nextIndex = 0\n        self.char = \"\"\n        self.remain = 0\n\n    def next(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n        if self.remain > 0:\n            self.remain -= 1\n            return self.char\n        if self.nextIndex == len(self.string): return \" \"\n        self.char = self.string[self.nextIndex]\n        self.nextIndex += 1\n        cnt = \"\"\n        while self.nextIndex < len(self.string) and self.string[self.nextIndex].isdigit():\n            cnt += self.string[self.nextIndex]\n            self.nextIndex += 1\n        self.remain = int(cnt) - 1\n        return self.char\n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        return self.remain > 0 or self.nextIndex < len(self.string)\n\n\n# Your StringIterator object will be instantiated and called as such:\n# obj = StringIterator(compressedString)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()"
}