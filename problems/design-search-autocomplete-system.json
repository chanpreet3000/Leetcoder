{
    "problemName": "design-search-autocomplete-system",
    "language": "python3",
    "code": "class AutocompleteNode:\n    def __init__(self):\n        self.sentences = {}\n        self.children = {}\n\nclass AutocompleteSystem:\n    def __init__(self, sentences: List[str], times: List[int]):\n        self.root = AutocompleteNode()\n        \n        for sentence, count in zip(sentences, times):\n            self.increaseSearchCount(sentence, count)\n            \n        self.currentNode = self.root\n        self.currentSearch = \"\"\n        \n            \n    def increaseSearchCount(self, sentence, count):\n        node = self.root\n        \n        for char in sentence:\n            if char not in node.children:\n                node.children[char] = AutocompleteNode()\n                \n            node = node.children[char]\n            \n            node.sentences[sentence] = node.sentences.get(sentence, 0) + count\n        \n\n    def input(self, c: str) -> List[str]:\n        if c == \"#\":\n            self.increaseSearchCount(self.currentSearch, 1)\n            self.currentSearch = \"\"\n            self.currentNode = self.root\n            \n            return []\n            \n        self.currentSearch += c\n            \n        if not self.currentNode:\n            return []\n                \n        self.currentNode = self.currentNode.children.get(c)\n        \n        if not self.currentNode:\n            return []\n        \n        countSearches = [(-count, search) for search, count  in self.currentNode.sentences.items()]\n        \n        top3 = heapq.nsmallest(3, countSearches)\n        \n        return [countSearch[1] for countSearch in top3]\n\n\n# Your AutocompleteSystem object will be instantiated and called as such:\n# obj = AutocompleteSystem(sentences, times)\n# param_1 = obj.input(c)"
}