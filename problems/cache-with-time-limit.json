{
    "problemName": "cache-with-time-limit",
    "language": "typescript",
    "code": "interface ICache {\n  value: number;\n  duration: number;\n}\n\ninterface ICacheKey {\n  [key: string]: ICache;\n}\n\nclass TimeLimitedCache {\n    private cache: ICacheKey;\n    constructor() {\n        this.cache = {};\n    }\n\n    set(key: number, value: number, duration: number): boolean {\n        if(this.cache[key] && (Date.now() <= this.cache[key].duration)){\n            this.cache[key] = { value, duration: Date.now() + duration }\n            return true;\n        } else {\n            this.cache[key] = { value, duration: Date.now() + duration }\n            return false;\n        }\n    }\n\n    get(key: number): number {\n        const value = this.cache[key];\n        if(value && Date.now() <= value.duration) {\n            return value.value;\n        } else {\n            return -1;\n        }\n    }\n\n\tcount(): number {\n        return Object.values(this.cache).filter(i => Date.now() <= i.duration).length\n    }\n}\n\n/**\n * Your TimeLimitedCache object will be instantiated and called as such:\n * var obj = new TimeLimitedCache()\n * obj.set(1, 42, 1000); // false\n * obj.get(1) // 42\n * obj.count() // 1\n */"
}