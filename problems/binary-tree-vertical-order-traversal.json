{
    "problemName": "binary-tree-vertical-order-traversal",
    "language": "swift",
    "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    var maxVal = 0\n    var minVal = 0\n    var dict = [Int : [(val:Int, row:Int)]]() //col : (val,row)\n    func verticalOrder(_ root: TreeNode?) -> [[Int]] {\n        dfs(root,0,0)\n        var res = [[Int]]()\n        for i in minVal...maxVal {\n            if let array = dict[i] {\n                let val = array.map{ $0.0 }\n                res.append(val) \n            }\n        }\n        return res\n    }\n    \n    func dfs(_ root: TreeNode?,_ row: Int,_ col: Int) {\n        guard let node = root else {\n            return \n        }\n        maxVal = max(maxVal,col)\n        minVal = min(minVal,col)\n        if var array = dict[col] {\n            array.append((node.val, row))\n            array = array.sorted(by: {$0.row < $1.row})\n            dict[col] = array\n        } \n        else {\n            dict[col] = [(node.val, row)]\n        }\n        if let left = node.left {\n            dfs(left, row+1, col-1)\n        }\n        if let right = node.right {\n            dfs(right, row+1, col+1)\n        }\n    }\n}"
}