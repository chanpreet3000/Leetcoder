{
    "problemName": "largest-1-bordered-square",
    "language": "golang",
    "code": "func largest1BorderedSquare(grid [][]int) int {\n    m, n := len(grid), len(grid[0])\n    left := make([][]int, m+1)\n    top := make([][]int, m+1)\n    for i := range left {\n        left[i] = make([]int, n+1)\n        top[i] = make([]int, n+1)\n    }\n\n    for i:=0; i<m; i++ {\n        for j:=0; j<n; j++ {\n            if grid[i][j] > 0 {\n                left[i+1][j+1] = left[i+1][j]+1\n                top[i+1][j+1] = top[i][j+1]+1\n            }\n        }\n    }\n\n   \n   for l:=min(m, n); l>=1; l-- {\n       for i:=0; i+l-1<m; i++ {\n           for j:=0; j+l-1<n; j++ {\n               if top[i+l-1+1][j+1]>=l && top[i+l-1+1][j+l-1+1]>=l && left[i+1][j+l-1+1]>=l && left[i+l-1+1][j+l-1+1] >= l {\n                   return l*l\n               }\n           }\n       }\n   }\n   return 0\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
}