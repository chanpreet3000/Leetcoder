{
    "problemName": "number-of-spaces-cleaning-robot-cleaned",
    "language": "java",
    "code": "class Solution {\n    public int numberOfCleanRooms(int[][] room) {\n        return dfs(room, 0, 0, 0, new HashSet<>(), new HashSet<>());\n    }\n    \n    private int dfs(final int[][] room, final int x, final int y, final int curDir, final Set<String> cleaned, final Set<String> traveled) {\n        if (room == null || room[0] == null) {\n            return 0;\n        }\n        final int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        final String cleanedCoord = x + \" \" + y;\n        int count = cleaned.contains(cleanedCoord) ? 0 : 1;\n        cleaned.add(cleanedCoord);\n        traveled.add(cleanedCoord + \" \" + curDir);\n        \n        \n        for (int i = 0; i < directions.length; i++) {\n            int nextDir = (curDir + i) % 4;\n           final int xx = x + directions[nextDir][0];\n           final int yy = y + directions[nextDir][1];\n           if (xx < 0 || xx >= room.length || yy < 0 || yy >= room[0].length || room[xx][yy] == 1) {\n                continue;\n            }\n            // If we see a grid that has been visited, then break as we can't change direction on that.\n            if (traveled.contains(xx + \" \" + yy + \" \" + nextDir)) {\n                break;\n            }\n            count += dfs(room, xx, yy, nextDir, cleaned, traveled);\n            break;\n        }\n\n        return count;\n    }\n}"
}