{
    "problemName": "slowest-key",
    "language": "java",
    "code": "class Solution {\n\n    public char slowestKey(int[] releaseTimes, String keysPressed) {\n        HashMap<Character, Integer> durationMap = new HashMap<>();\n        durationMap.put(keysPressed.charAt(0), releaseTimes[0]);\n        // find and store the keypress duration for each key in the durationMap\n        for (int i = 1; i < releaseTimes.length; i++) {\n            int currentDuration = releaseTimes[i] - releaseTimes[i - 1];\n            char currentKey = keysPressed.charAt(i);\n            durationMap.put(currentKey,\n                Math.max(durationMap.getOrDefault(currentKey, 0), currentDuration));\n        }\n        char slowestKey = ' ';\n        int longestPressDuration = 0;\n        // iterate over the map to find the slowest key\n        for (Map.Entry mapElement : durationMap.entrySet()) {\n            int duration = (int) mapElement.getValue();\n            char key = (char) mapElement.getKey();\n            if (duration > longestPressDuration) {\n                longestPressDuration = duration;\n                slowestKey = key;\n            } else if (duration == longestPressDuration && key > slowestKey) {\n                slowestKey = key;\n            }\n        }\n        return slowestKey;\n    }\n}"
}