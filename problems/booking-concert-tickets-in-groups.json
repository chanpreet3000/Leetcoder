{
    "problemName": "booking-concert-tickets-in-groups",
    "language": "cpp",
    "code": "struct SegTree {\n    int n, stMax[100000];\n    long long stSum[100000];\n    void update(int p, int val) {\n        stMax[p += n] -= val, stSum[p] -= val;\n        while (p >>= 1) {\n            stMax[p] = max(stMax[p << 1], stMax[p << 1 | 1]);\n            stSum[p] = stSum[p << 1] + stSum[p << 1 | 1];\n        }\n    }\n\n    int queryMax(int l, int r) {\n        int res = 0;\n        for (l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {\n            if (l & 1) res = max(res, stMax[l++]);\n            if (r & 1) res = max(res, stMax[--r]);\n        }\n        return res;\n    }\n\n    long long querySum(int l, int r) {\n        long long res = 0;\n        for (l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {\n            if (l & 1) res += stSum[l++];\n            if (r & 1) res += stSum[--r];\n        }\n        return res;\n    }\n};\nclass BookMyShow {\n    int low, seatCount;\n    SegTree st;\npublic:\n    BookMyShow(int n, int m) {\n        seatCount = m, low = 0, st.n = n;\n        fill(st.stMax, st.stMax + (n << 1), m);\n        for (int i = n; i--;) st.stSum[n + i] = m;\n        for (int i = n; --i;) st.stSum[i] = st.stSum[i << 1] + st.stSum[i << 1 | 1];\n    }\n    \n    vector<int> gather(int k, int maxRow) {\n        if (k > seatCount || low > maxRow || st.queryMax(low, maxRow) < k) return {};\n        int l = low, r = maxRow, mid, tmp;\n        while (l < r) {\n            mid = (l + r) >> 1;\n            if (st.queryMax(low, mid) >= k) r = mid;\n            else l = mid + 1;\n        }\n        tmp = seatCount - st.queryMax(l, l);\n        st.update(l, k);\n        return {l, tmp};\n    }\n    \n    bool scatter(int k, int maxRow) {\n        if (low > maxRow || st.querySum(low, maxRow) < k) return false;\n        int l = low, r = maxRow, mid;\n        while (l < r) {\n            mid = (l + r) >> 1;\n            if (st.querySum(low, mid) >= k) r = mid;\n            else l = mid + 1;\n        }\n        long long tmp = st.querySum(low, l - 1) & -(long long)(low != l);\n        if (k - tmp == seatCount) low = l + 1;\n        else st.update(l, k - tmp), low = l;\n        return true;\n    }\n};\n\n/**\n * Your BookMyShow object will be instantiated and called as such:\n * BookMyShow* obj = new BookMyShow(n, m);\n * vector<int> param_1 = obj->gather(k,maxRow);\n * bool param_2 = obj->scatter(k,maxRow);\n */"
}