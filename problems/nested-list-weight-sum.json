{
    "problemName": "nested-list-weight-sum",
    "language": "csharp",
    "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * interface NestedInteger {\n *\n *     // Constructor initializes an empty nested list.\n *     public NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     public NestedInteger(int value);\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool IsInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     int GetInteger();\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public void SetInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public void Add(NestedInteger ni);\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a single integer\n *     IList<NestedInteger> GetList();\n * }\n */\npublic class Solution {\n    public int DepthSum(IList<NestedInteger> nestedList) {\n        int sum = 0;\n        foreach(NestedInteger nested in nestedList) {\n            Queue<Tuple<NestedInteger, int>> queue = new Queue<Tuple<NestedInteger, int>>();\n            int level = 1;\n            queue.Enqueue(new Tuple<NestedInteger, int>(nested, level));\n            while(queue.Count() > 0) {\n                Tuple<NestedInteger, int> curr = queue.Dequeue();\n                if(!curr.Item1.IsInteger()) {\n                    level = curr.Item2 + 1;\n                    foreach(NestedInteger n in curr.Item1.GetList()) {\n                        queue.Enqueue(new Tuple<NestedInteger, int>(n , level));\n                    }\n                }else{\n                    sum += curr.Item1.GetInteger() * curr.Item2;\n                }\n            }\n        }\n        \n        return sum;\n    }\n}"
}