{
    "problemName": "count-the-number-of-incremovable-subarrays-ii",
    "language": "cpp",
    "code": "typedef long long int ll;\n\nclass Solution {\npublic:\n    long long incremovableSubarrayCount(vector<int>& nums) {\n        ll n = nums.size();\n        vector<bool> pre(nums.size(), true);\n        vector<bool> suff(nums.size(), true);\n        int _max = -1, f = true;\n        for(ll i = 0; i < n; i++){\n            if(nums[i] <= _max){\n                f = false;\n            }\n            pre[i] = f;\n            _max = max(_max, nums[i]);\n        }\n        _max = 1e9 + 1, f = true;\n        for(ll i = n - 1; i >= 0; i--){\n            if(nums[i] >= _max){\n                f = false;\n            }\n            suff[i] = f;\n            _max = min(_max, nums[i]);\n        }\n        // for(int i = 0; i < n; i ++){\n        //     cout<<pre[i]<<\" \";\n        // }\n        // cout<<endl;\n        // for(int i = 0; i < n; i ++){\n        //     cout<<suff[i]<<\" \";\n        // }\n        // cout<<endl;\n        \n        ll ans = 0;\n        for(ll i = 0; i < n; i++){\n            if(i < n - 1 && suff[i + 1] == false)continue;\n            ll right = i < n - 1?nums[i + 1]:1e18;\n            \n            ll lo = 0, hi = i, left = -1;\n            while(lo <= hi){\n                ll mid = (lo + hi + 1)/2;\n                if(pre[mid] == 1 && nums[mid] < right){\n                    lo = mid + 1;\n                    left = mid;\n                }else{\n                    hi = mid - 1;\n                }\n            }\n            left = min(left + 1, i);\n            // cout<<left<<endl;\n            ans += left + 1;\n            \n        }\n        return ans;\n    }\n};"
}