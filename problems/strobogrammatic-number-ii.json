{
    "problemName": "strobogrammatic-number-ii",
    "language": "python3",
    "code": "#class Solution:\n#    def findStrobogrammatic(self, n: int) -> List[str]:\n#        dic = {\"0\":\"0\", \"8\":\"8\", \"1\":\"1\", \"6\":\"9\", \"9\":\"6\"} \n        \n#\"\"\"\n# recurisve\nclass Solution:\n    def findStrobogrammatic(self, n: int) -> List[str]:\n        # Special case: n = 1\n        if n == 1: # only when n == 1,  0 initial can make work,  in the other case, leading 0 number is not valid.\n            return ['0', '1', '8']  \n        \n        nstrobo = self.findStrobogrammatic_helper(n)\n        return [strobo for strobo in nstrobo if strobo[0] != '0'] # does not include 0 for n > 1\n                \n        #return [num for num in self.findStrobogrammatic_helper(n) if num[0] != '0' and num[-1] != '0']  # remove leading zero. \n        \n    @functools.lru_cache()\n    def findStrobogrammatic_helper(self, n):\n        # Base cases: we keep leading 0 cases;\n        if n == 1: \n            return ['0', '1', '8'] \n        if n == 2:\n            return ['00', '11', '88', '69', '96']\n        \n        base_cases = self.findStrobogrammatic_helper(n - 2)\n        \n        results = []\n        \n        for base in base_cases:\n            results.append('6' + base + '9')\n            results.append('9' + base + '6')\n            results.append('1' + base + '1')\n            results.append('8' + base + '8')\n            results.append('0' + base + '0')\n            \n        return results\n#\"\"\"\n    \n\"\"\"\n# iterative\nclass Solution:  \n    def findStrobogrammatic(self, n):\n        output = [''] if n%2 == 0 else ['0', '1', '8']\n\n        for _ in range(n//2):\n            temp = []\n            for num in output:\n                temp.append('1' + num + '1')\n                temp.append('8' + num + '8')\n                temp.append('6' + num + '9')\n                temp.append('9' + num + '6')\n                if len(num) < n-2:\n                    temp.append('0' + num + '0')\n            output = temp\n\n        return output\n\"\"\""
}