{
    "problemName": "number-of-flowers-in-full-bloom",
    "language": "golang",
    "code": "func fullBloomFlowers(flowers [][]int, persons []int) []int {\n  // Extract start and end times from flowers\n  start, end := make([]int, len(flowers)), make([]int, len(flowers))\n  for i, flower := range flowers {\n    start[i] = flower[0]\n    end[i] = flower[1]\n  }\n  // Sort them both in ascending order\n  sort.Ints(start)\n  sort.Ints(end)\n  res := make([]int, len(persons))\n  // The result at the arrival time of a person is the following\n  // Number of flowers bloomed <= the arrival time of the person -\n  // Number of flowers stopped blooming < the arrival time of the person\n  // We'll find this information using binary search\n  for i := 0; i < len(persons); i++ {\n    res[i] = upperBound(start, persons[i]) - lowerBound(end, persons[i])\n  }\n  return res\n}\n\nfunc upperBound(nums []int, target int) int {\n  // var res int\n  left, right := 0, len(nums)-1\n  for left <= right {\n    mid := left + (right - left)/2\n    if nums[mid] > target {\n      right = mid - 1\n    } else {\n      // res = mid\n      left = mid + 1\n    }\n  }\n  return left\n}\n\nfunc lowerBound(nums []int, target int) int {\n  // var res int\n  left, right := 0, len(nums)-1\n  for left <= right {\n    mid := left + (right - left)/2\n    if nums[mid] >= target {\n      right = mid - 1\n    } else {\n      // res = mid\n      left = mid + 1\n    }\n  }\n  return left\n}"
}