{
    "problemName": "maximum-white-tiles-covered-by-a-carpet",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    int maximumWhiteTiles(vector<vector<int>>& tiles, int carpetLen) {\n        int ans = 0,n = tiles.size();\n \n        sort(tiles.begin(),tiles.end());\n \n        vector<int> arr(n);\n        for(int i=0;i<n;i++){\n            arr[i] = tiles[i][1] - tiles[i][0] + 1;\n            if(i>0){\n                arr[i] += arr[i-1];\n            }\n        }\n \n        for(int i=0;i<n;i++){\n            int leftEnd = tiles[i][0],rightEnd = tiles[i][0] + carpetLen - 1;\n \n            int l = i,r = n - 1,left = i,right = i - 1;\n            while(l<=r){\n                int mid = (l+r)/2;\n                if(tiles[mid][1]<=rightEnd){\n                    right = mid;\n                    l = mid + 1;\n                }\n                else{\n                    r = mid - 1;\n                }\n            }\n \n            int curr = 0;\n \n            if(right!=i-1){\n                curr += arr[right];\n                if(left>0){\n                    curr -= arr[left-1];\n                }\n            }\n \n            if(right+1<n){\n                curr += max(0,rightEnd-tiles[right+1][0]+1);\n            }\n \n            ans = max(ans,curr);\n        }\n \n        return ans;\n    }\n};"
}