{
    "problemName": "number-of-distinct-islands",
    "language": "python3",
    "code": "class Solution:\n    def dfs(self, i, j, visited, island, grid):\n        r, c = len(grid), len(grid[0])\n        visited.add((i, j))\n        \n        # up\n        if i > 0 and (i-1, j) not in visited and grid[i-1][j] == 1:\n            island.append(\"U\")\n            self.dfs(i-1, j, visited, island, grid)\n            island.append(\"D\")\n        \n        # down\n        if i < r-1 and (i+1, j) not in visited and grid[i+1][j] == 1:\n            island.append(\"D\")\n            self.dfs(i+1, j, visited, island, grid)\n            island.append(\"U\")\n            \n        # left\n        if j > 0 and (i, j-1) not in visited and grid[i][j-1] == 1:\n            island.append(\"L\")\n            self.dfs(i, j-1, visited, island, grid)\n            island.append(\"R\")\n            \n        # right\n        if j < c-1 and (i, j+1) not in visited and grid[i][j+1] == 1:\n            island.append(\"R\")\n            self.dfs(i, j+1, visited, island, grid)\n            island.append(\"L\")\n        \n    def numDistinctIslands(self, grid: List[List[int]]) -> int:        \n        r, c = len(grid), len(grid[0])\n        \n        islands = set()\n        visited = set()\n        \n        for i in range(r):\n            for j in range(c):\n                if (i, j) not in visited and grid[i][j] == 1:\n                    island = []\n                    self.dfs(i, j, visited, island, grid)\n                    islands.add(\"\".join(island))\n        \n        return len(islands)\n"
}