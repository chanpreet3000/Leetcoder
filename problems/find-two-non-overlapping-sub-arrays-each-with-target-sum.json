{
    "problemName": "find-two-non-overlapping-sub-arrays-each-with-target-sum",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    int minSumOfLengths(vector<int>& a, int target) {\n        int n = a.size();\n        \n        vector<int> start(n,0), end(n,0);\n        \n        int sum = 0;\n        int i=0,j=0;\n                \n        while(i<n && j<n) {                        \n            sum += a[j];\n            \n            while(sum>=target) {\n                if(sum==target){\n                    start[i] = j-i+1;\n                    end[j] = j-i+1;\n                }    \n                sum -= a[i];\n                i++;\n            }\n            \n            j++;\n        }\n        \n        vector<int> lt(n,-1), rt(n,-1);\n        \n        int min = -1;\n        for(int i=0;i<n;i++){\n            if(end[i]>0){\n                if(min<0){\n                    min = end[i];\n                }\n                else{\n                    min = std::min(min,end[i]);\n                }\n            }\n            lt[i] = min;\n        }\n        \n        min = -1;\n        for(int i=n-1;i>=0;i--){\n            if(start[i]>0){\n                if(min<0){\n                    min = start[i];\n                }\n                else{\n                    min = std::min(min,start[i]);\n                }\n            }\n            rt[i] = min;\n        }\n        \n        int ans = 300000;\n        for(int i=0;i<n;i++){\n            if(i>0 && lt[i-1]>0 && rt[i]>0)\n                ans = std::min(ans,lt[i-1]+rt[i]);\n            if(i+1<n && lt[i]>0 && rt[i+1]>0)\n                ans = std::min(ans,lt[i]+rt[i+1]);\n        }\n        \n        if(ans==300000)\n            return -1;\n        return ans;\n        \n        \n    }\n};\n\n// 3, 4, 3"
}