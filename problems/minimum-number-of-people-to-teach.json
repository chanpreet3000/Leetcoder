{
    "problemName": "minimum-number-of-people-to-teach",
    "language": "golang",
    "code": "func minimumTeachings(n int, languages [][]int, friendships [][]int) int {\n    // languagesPerUser[user][language] = true if user knows language\n    languagesPerUser := make([][]bool, len(languages) + 1)\n    for user := 1; user <= len(languages); user ++ {\n        languagesPerUser[user] = make([]bool, n + 1)\n        \n        for _, language := range(languages[user-1]) {\n            languagesPerUser[user][language] = true\n        }\n    }\n    \n    // filter out the friendships that have languages in common and won't require to be taught anything\n    friendshipsWithProblem := make([][]int, 0)\n    for _, friends := range(friendships) {\n        common := false\n        for language := 1; language <= n; language ++ {\n            if languagesPerUser[friends[0]][language] == true && languagesPerUser[friends[1]][language] == true {\n                common = true\n                break\n            }\n        }\n        \n        if common == false {\n            friendshipsWithProblem = append(friendshipsWithProblem, friends)\n        }\n    }\n    \n    min := len(languages)\n    for language := 1; language <= n; language ++ {\n        teachCount := 0\n        \n        for _, friends := range(friendshipsWithProblem) {\n            if languagesPerUser[friends[0]][language] == false {\n                languagesPerUser[friends[0]][language] = true\n                teachCount ++\n            }\n                \n            if languagesPerUser[friends[1]][language] == false {\n                languagesPerUser[friends[1]][language] = true\n                teachCount ++\n            }\n        }\n        \n        if teachCount < min {\n            min = teachCount\n        }\n    }\n    \n    return min\n}\n"
}