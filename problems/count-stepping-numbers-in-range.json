{
    "problemName": "count-stepping-numbers-in-range",
    "language": "python3",
    "code": "class Solution:\n    '''\n    iterate i from 1 to |len| - 1\n    M[i][j]: #stepping numbers of i digits ending with j\n    M[i][j] = M[i-1][j-1] + M[i-1][j+1], for j in {1,2,...,8}\n    M[i][0] = M[i-1][1]\n    M[i][9] = M[i-1][8]\n\n    M[0][j] = 1 for j in {1-9}\n\n    when iterate to |len|:\n      M[i][j][k]: #stepping numbers of i digits ending with j, k(0/1) if reaching limit\n      M[i][j][0] = (M[i-1][j-1][0] + M[i-1][j+1][0])\n                 + (M[i-1][j-1][1] if j < s[i]) + (M[i-1][j-1][1] if j < s[i])\n      M[i][j][1] = M[i-1][j-1][1] if s[i] is 'j'\n      M[0][k][0] = 1 if 'k' < s[0]\n      M[0][k][1] = 1 if 'k' == s[0]\n    '''\n    def count(self, limit: str) -> int:\n      mod = 1000000007\n      res = 0\n      limit_len = len(limit)\n      if limit_len == 1:\n        return int(limit)\n      M = [[0] * 10 for _ in range(limit_len - 1)]\n      adjacent_digit = {0: [1], 9: [8]}\n      for n in range(1, 9):\n        adjacent_digit[n] = [n - 1, n + 1]\n      for j in range(1, 10):\n        M[0][j] = 1\n        res += 1\n      for i in range(1, limit_len - 1):\n        for j in range(10):\n          for prev in adjacent_digit[j]:\n            M[i][j] += M[i-1][prev]\n            M[i][j] %= mod\n            res = (res + M[i-1][prev]) % mod\n      X = [[[0] * 2 for _ in range(10)] for _ in range(limit_len)]\n      first_digit = int(limit[0])\n      for j in range(1, first_digit):\n        X[0][j][0] = 1\n      X[0][first_digit][1] = 1\n      for i in range(1, limit_len):\n        for j in range(10):\n          for prev in adjacent_digit[j]:\n            X[i][j][0] += X[i-1][prev][0]\n            X[i][j][0] %= mod\n            # print('a', i, j)\n            # res = (res + X[i-1][prev][0]) % mod\n            if j < ord(limit[i]) - ord('0'):\n              X[i][j][0] += X[i-1][prev][1]\n              X[i][j][0] %= mod\n              # res = (res + X[i-1][prev][1]) % mod\n            elif j == ord(limit[i]) - ord('0'):\n              # if i == 2 and j == 1: print('b', i, j, prev)\n              X[i][j][1] += X[i-1][prev][1]\n              X[i][j][1] %= mod\n\n      for [x, y] in X[limit_len-1]:\n        # print(x, y)\n        res = (res + x + y) % mod\n      # print(X, len(X), len(X[0]))\n      return res\n\n    def countSteppingNumbers(self, low: str, high: str) -> int:\n        large = self.count(high)\n\n        small = self.count(str(int(low) - 1))\n        print('small', small, 'large', large)\n        mod = 1000000007\n        return (large - small + mod) % mod\n"
}