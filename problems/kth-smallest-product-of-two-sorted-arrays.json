{
    "problemName": "kth-smallest-product-of-two-sorted-arrays",
    "language": "cpp",
    "code": "class Solution {\npublic:\n    long long check(vector<int> &nums1, vector<int> &nums2, long long k, long long m){\n        long long smaller = 0;\n        for(int i = 0; i < nums2.size(); i++){\n            if(nums2[i] >= 0){\n                long long lo = 0, hi = nums1.size() - 1, ans = -1;\n                while(lo <= hi){\n                    long long mid = (lo + hi + 1)/2;\n                    if(1LL * nums1[mid] * nums2[i] <= m){\n                        lo = mid + 1;\n                        ans = mid;\n                    }else{\n                        hi = mid - 1;\n                    }\n                }\n                smaller += ans + 1;\n            }else{\n                long long lo = 0, hi = nums1.size() - 1, ans = nums1.size();\n                while(lo <= hi){\n                    long long mid = (lo + hi + 1)/2;\n                    if(1LL * nums1[mid] * nums2[i] <= m){\n                        hi = mid - 1;\n                        ans = mid;\n                    }else{\n                        lo = mid + 1;\n                    }\n                }\n                smaller += (nums1.size() - ans);\n            }\n            \n        }\n        // cout<<m<<\" \"<<smaller<<endl;\n        return smaller >= k;\n    }\n    long long kthSmallestProduct(vector<int>& nums1, vector<int>& nums2, long long k) {\n        long long lo = -1e10, hi = 1e10, ans = 1e10 + 5;\n        while(lo <= hi){\n            long long m = (lo + hi)/2;\n            if(check(nums1, nums2, k, m)){\n                hi = m - 1;\n                ans = m;\n            }else{\n                lo = m + 1;\n            }\n        }\n        return ans;\n    }\n};\n\n// [2,5]\n// [3,4]\n// 2\n// [-4,-2,0,3]\n// [2,4]\n// 6\n// [-2,-1,0,1,2]\n// [-3,-1,2,4,5]\n// 3\n// [-9,6,10]\n// [-7,-1,1,2,3,4,4,6,9,10]\n// 15"
}