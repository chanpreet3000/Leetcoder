{
    "problemName": "first-unique-number",
    "language": "java",
    "code": "class FirstUnique {\n\n    private HashMap<Integer, ListNode> map;\n    private HashSet<Integer> set;\n    private ListNode dummy;\n    ListNode tail;\n\n    public FirstUnique(int[] nums) {\n        this.map = new HashMap<Integer, ListNode>();\n        this.set = new HashSet<Integer>();\n        this.dummy = new ListNode(0);\n        this.tail = this.dummy;\n        \n        for (int num : nums) {\n            add(num);\n        }\n    }\n\n    public void add(int num) {\n        if (set.contains(num)) {\n            return;\n        }\n\n        if (map.containsKey(num)) {\n            removeNum(num);\n            return;\n        }\n        addToTail(num);\n    }\n\n    public int showFirstUnique() {\n        if (dummy.next != null) {\n            return dummy.next.val;\n        }\n        return -1;\n    }\n\n    private void addToTail(int val) {\n        ListNode newNode = new ListNode(val);\n        tail.next = newNode;\n\n        map.put(val, tail);\n\n        tail = newNode;\n    }\n\n    private void removeNum(int num) {\n        ListNode prev = map.get(num);\n        ListNode cur = prev.next;\n        prev.next = prev.next.next;\n\n        map.remove(num);\n        set.add(num);\n\n        if (cur.next != null) {\n            map.put(prev.next.val, prev);\n        }\n        else {\n            tail = prev;\n        }\n    }\n\n    /*\n    Linked List: 记录顺序，每次加入放到最后\n    hashTable: number - node\n    set: duplicate numbers\n    */\n}"
}