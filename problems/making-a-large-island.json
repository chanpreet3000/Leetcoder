{
    "problemName": "making-a-large-island",
    "language": "java",
    "code": "class Solution {\n    int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    int n = 0;\n    Map<Integer, Integer> map = new HashMap<>();\n\n    public int largestIsland(int[][] grid) {\n        n = grid.length;\n        // each connected island has same unique index\n        int colorIndex = 2;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    int count = dfs(grid, colorIndex, i, j);\n                    map.put(colorIndex, count);\n                    colorIndex++;\n                }\n            }\n        }\n        int re = map.getOrDefault(2, 0);\n        // re = 0 : all water  re = n * n : all island\n        if (re == 0) {\n            return 1;\n        }\n        if (re == n * n) {\n            return re;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 0) {\n                    // save around color index\n                    Set<Integer> colors = new HashSet<>();\n                    for (int[] dir : dirs) {\n                        int dx = i + dir[0];\n                        int dy = j + dir[1];\n                        if (dx >= 0 && dx < n && dy >= 0 && dy < n) {\n                            colors.add(grid[dx][dy]);\n                        }\n                    }\n                    int sum = 1;\n                    for (int color : colors) {\n                        sum += map.getOrDefault(color, 0);\n                    }\n                    re = Math.max(re, sum);\n                }\n            }\n        }\n        return re;\n    }\n\n    private int dfs(int[][] grid, int colorIndex, int x, int y) {\n        boolean valid = x >= 0 && x < n && y >= 0 && y < n && grid[x][y] == 1;\n        if (!valid) {\n            return 0;\n        }\n        grid[x][y] = colorIndex;\n        int count = 1;\n        for (int[] dir : dirs) {\n            count += dfs(grid, colorIndex, x + dir[0], y + dir[1]);\n        }\n        return count;\n    }\n}"
}